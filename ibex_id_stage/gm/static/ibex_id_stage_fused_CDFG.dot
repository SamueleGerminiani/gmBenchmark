strict digraph "compose( ,  )" {
	node [label="\N"];
	"decoder_i.711:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c39810>",
		fillcolor=lightcyan,
		label="decoder_i.711:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.711:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c3e250>",
		fillcolor=turquoise,
		label="decoder_i.711:BL
jump_in_dec_o = 1'b1;
alu_op_a_mux_sel_o = OP_A_CURRPC;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_\
INCR_PC;
alu_operator_o = ALU_ADD;
regfile_we = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c399d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c39b90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c39d10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c39ed0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e090>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e1d0>]",
		style=filled,
		typ=Block];
	"decoder_i.711:CA" -> "decoder_i.711:BL"	 [cond="[]",
		lineno=None];
	"587:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e236d0>",
		def_var="['regfile_we']",
		fillcolor=deepskyblue,
		label="587:AS
regfile_we = (illegal_csr_insn_i || !instr_executing)? 1'b0 : 
(data_req_dec || multdiv_en_dec)? regfile_we_wb : regfile_\
we_dec;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['illegal_csr_insn_i', 'instr_executing', 'data_req_dec', 'multdiv_en_dec', 'regfile_we_wb', 'regfile_we_dec']"];
	"614:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e14610>",
		def_var="['rfvi_reg_we_o']",
		fillcolor=deepskyblue,
		label="614:AS
rfvi_reg_we_o = regfile_we;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_we']"];
	"587:AS" -> "614:AS";
	"controller_i.698:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3861890>",
		fillcolor=springgreen,
		label="controller_i.698:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.698:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3861950>",
		fillcolor=turquoise,
		label="controller_i.698:BL
pc_set_o = 1'b1;
pc_mux_o = PC_EXC;
exc_pc_mux_o = (debug_mode_q)? EXC_PC_DBG_EXC : EXC_PC_EXC;
csr_save_id_\
o = 1'b1;
csr_save_cause_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38611d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3861310>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3861610>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3861750>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38618d0>]",
		style=filled,
		typ=Block];
	"controller_i.698:IF" -> "controller_i.698:BL"	 [cond="['exc_req_q', 'store_err_q', 'load_err_q']",
		label="(exc_req_q || store_err_q || load_err_q)",
		lineno=698];
	"controller_i.734:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e6fd10>",
		fillcolor=springgreen,
		label="controller_i.734:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.698:IF" -> "controller_i.734:IF"	 [cond="['exc_req_q', 'store_err_q', 'load_err_q']",
		label="!((exc_req_q || store_err_q || load_err_q))",
		lineno=698];
	"decoder_i.529:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3993710>",
		fillcolor=lightcyan,
		label="decoder_i.529:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.529:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993810>",
		fillcolor=cadetblue,
		label="decoder_i.529:BS
alu_operator_o = ALU_GEU;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993810>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.529:CA" -> "decoder_i.529:BS"	 [cond="[]",
		lineno=None];
	"773:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3634250>",
		fillcolor=lightcyan,
		label="773:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"773:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf36345d0>",
		fillcolor=turquoise,
		label="773:BL
id_wb_fsm_ns = WAIT_MULTICYCLE;
stall_multdiv = 1'b1;
instr_multicycle_done_n = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634450>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634610>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634790>]",
		style=filled,
		typ=Block];
	"773:CA" -> "773:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.752:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c4d210>",
		fillcolor=lightcyan,
		label="decoder_i.752:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.752:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d350>",
		fillcolor=cadetblue,
		label="decoder_i.752:BS
csr_op = CSR_OP_CLEAR;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d350>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.752:CA" -> "decoder_i.752:BS"	 [cond="[]",
		lineno=None];
	"controller_i.533:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75e10>",
		fillcolor=cadetblue,
		label="controller_i.533:BS
mfip_id = 4'd6;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75e10>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.Leaf_515:AL"	 [def_var="['mfip_id']",
		label="controller_i.Leaf_515:AL"];
	"controller_i.533:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.638:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c95a90>",
		fillcolor=lightcyan,
		label="decoder_i.638:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.638:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95b90>",
		fillcolor=cadetblue,
		label="decoder_i.638:BS
alu_operator_o = ALU_XOR;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95b90>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.638:CA" -> "decoder_i.638:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.679:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3caaed0>",
		fillcolor=lightcyan,
		label="decoder_i.679:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.679:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c2f5d0>",
		fillcolor=turquoise,
		label="decoder_i.679:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_DIV;
div_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b00;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2f0d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2f290>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2f4d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2f610>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2f890>]",
		style=filled,
		typ=Block];
	"decoder_i.679:CA" -> "decoder_i.679:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.482:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c3e550>",
		fillcolor=linen,
		label="decoder_i.482:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.544:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf39895d0>",
		fillcolor=lightcyan,
		label="decoder_i.544:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.544:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.584:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c7c790>",
		fillcolor=lightcyan,
		label="decoder_i.584:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.584:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.563:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c72d50>",
		fillcolor=lightcyan,
		label="decoder_i.563:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.563:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.626:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c91350>",
		fillcolor=lightcyan,
		label="decoder_i.626:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.626:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.483:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3974b50>",
		fillcolor=lightcyan,
		label="decoder_i.483:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.483:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.703:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c91dd0>",
		fillcolor=lightcyan,
		label="decoder_i.703:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.703:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.723:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c3e610>",
		fillcolor=lightcyan,
		label="decoder_i.723:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.723:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.501:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3978fd0>",
		fillcolor=lightcyan,
		label="decoder_i.501:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.501:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.521:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf39a7690>",
		fillcolor=lightcyan,
		label="decoder_i.521:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.521:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.757:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c4d650>",
		fillcolor=lightcyan,
		label="decoder_i.757:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.757:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.592:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c811d0>",
		fillcolor=lightcyan,
		label="decoder_i.592:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.592:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"decoder_i.599:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c81a50>",
		fillcolor=lightcyan,
		label="decoder_i.599:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.482:CS" -> "decoder_i.599:CA"	 [cond="['opcode']",
		label=opcode,
		lineno=482];
	"controller_i.605:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3858dd0>",
		fillcolor=turquoise,
		label="controller_i.605:BL
ctrl_fsm_ns = IRQ_TAKEN;
halt_if = 1'b1;
flush_id = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858c90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858e10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858f50>]",
		style=filled,
		typ=Block];
	"controller_i.Leaf_550:AL"	 [def_var="['pc_set_o', 'csr_save_id_o', 'csr_mtval_o', 'halt_if', 'debug_cause_o', 'csr_restore_mret_id_o', 'perf_jump_o', 'exc_cause_o', '\
perf_tbranch_o', 'csr_save_if_o', 'instr_req_o', 'nmi_mode_d', 'ctrl_fsm_ns', 'debug_mode_d', 'csr_restore_dret_id_o', 'debug_csr_\
save_o', 'flush_id', 'ctrl_busy_o', 'pc_mux_o', 'csr_save_cause_o', 'exc_pc_mux_o']",
		label="controller_i.Leaf_550:AL"];
	"controller_i.605:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.420:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3ce6b50>",
		def_var="['instr']",
		fillcolor=deepskyblue,
		label="decoder_i.420:AS
instr = instr_rdata_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_rdata_i']"];
	"decoder_i.428:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf399abd0>",
		def_var="['regfile_raddr_b_o']",
		fillcolor=deepskyblue,
		label="decoder_i.428:AS
regfile_raddr_b_o = instr[24:20];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr']"];
	"decoder_i.420:AS" -> "decoder_i.428:AS";
	"decoder_i.443:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf39aa2d0>",
		clk_sens=False,
		fillcolor=gold,
		label="decoder_i.443:AL",
		sens="[]",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['CSR_MSTATUS', 'csr_access_o', 'CSR_MIE', 'CSR_DSCRATCH0', 'CSR_DSCRATCH1', 'instr', 'sv2v_cast_290A1', 'CSR_OP_SET', 'csr_op_o', '\
CSR_OP_WRITE', 'CSR_OP_READ', 'CSR_DPC', 'CSR_DCSR']"];
	"decoder_i.420:AS" -> "decoder_i.443:AL";
	"decoder_i.426:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf399a810>",
		def_var="['zimm_rs1_type_o']",
		fillcolor=deepskyblue,
		label="decoder_i.426:AS
zimm_rs1_type_o = { 27'b0, instr[19:15] };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr']"];
	"decoder_i.420:AS" -> "decoder_i.426:AS";
	"decoder_i.438:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf39acb10>",
		clk_sens=False,
		fillcolor=gold,
		label="decoder_i.438:AL",
		sens="['csr_op', 'CSR_OP_READ']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['CSR_OP_CLEAR', 'CSR_OP_SET', 'csr_op', 'CSR_OP_READ', 'instr']"];
	"decoder_i.420:AS" -> "decoder_i.438:AL";
	"decoder_i.421:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3ce6f90>",
		def_var="['imm_i_type_o']",
		fillcolor=deepskyblue,
		label="decoder_i.421:AS
imm_i_type_o = { { 20{ instr[31] } }, instr[31:20] };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr', 'instr']"];
	"decoder_i.420:AS" -> "decoder_i.421:AS";
	"decoder_i.423:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3971b90>",
		def_var="['imm_b_type_o']",
		fillcolor=deepskyblue,
		label="decoder_i.423:AS
imm_b_type_o = { { 19{ instr[31] } }, instr[31], instr[7], instr[30:25], instr[11:8], 1'b0 };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr', 'instr', 'instr', 'instr', 'instr']"];
	"decoder_i.420:AS" -> "decoder_i.423:AS";
	"decoder_i.422:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3971510>",
		def_var="['imm_s_type_o']",
		fillcolor=deepskyblue,
		label="decoder_i.422:AS
imm_s_type_o = { { 20{ instr[31] } }, instr[31:25], instr[11:7] };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr', 'instr', 'instr']"];
	"decoder_i.420:AS" -> "decoder_i.422:AS";
	"decoder_i.429:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf399ae10>",
		def_var="['regfile_waddr_o']",
		fillcolor=deepskyblue,
		label="decoder_i.429:AS
regfile_waddr_o = instr[11:07];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr']"];
	"decoder_i.420:AS" -> "decoder_i.429:AS";
	"decoder_i.453:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3997050>",
		clk_sens=False,
		fillcolor=gold,
		label="decoder_i.453:AL",
		sens="['ALU_SLL', 'ALU_NE', 'instr', 'OP_A_REG_A', 'IMM_B_B', 'MD_OP_MULH', 'OP_B_IMM', 'MD_OP_MULL', 'IMM_A_ZERO', 'ALU_SRA', 'ALU_SLT', '\
IMM_B_INCR_PC', 'ALU_SRL', 'csr_illegal', 'MD_OP_DIV', 'IMM_B_J', 'ALU_AND', 'IMM_B_I', 'ALU_OR', 'ALU_SLTU', 'sv2v_cast_F99D1', '\
sv2v_cast_DB892', 'CSR_OP_CLEAR', 'MD_OP_REM', 'ALU_ADD', 'IMM_B_S', 'RF_WD_CSR', 'RF_WD_LSU', 'ALU_EQ', 'OP_A_IMM', 'OP_A_CURRPC', '\
CSR_OP_READ', 'ALU_GE', 'ALU_SUB', 'RF_WD_EX', 'IMM_B_U', 'OP_B_REG_B', 'ALU_LT', 'CSR_OP_WRITE', 'CSR_OP_SET', 'IMM_A_Z', 'ALU_\
GEU', 'ALU_XOR', 'ALU_LTU']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['ALU_SLL', 'ALU_NE', 'ALU_SLTU', 'OP_A_REG_A', 'sv2v_cast_F99D1', 'MD_OP_MULH', 'OP_B_IMM', 'MD_OP_MULL', 'sv2v_cast_DB892', 'ALU_\
SRA', 'ALU_SLT', 'IMM_B_INCR_PC', 'ALU_SRL', 'csr_illegal', 'MD_OP_DIV', 'IMM_B_J', 'ALU_AND', 'IMM_B_I', 'ALU_OR', 'instr', 'IMM_\
B_B', 'IMM_A_ZERO', 'CSR_OP_CLEAR', 'MD_OP_REM', 'ALU_ADD', 'IMM_B_S', 'RF_WD_CSR', 'RF_WD_LSU', 'ALU_EQ', 'instr_new_i', 'OP_A_\
IMM', 'OP_A_CURRPC', 'CSR_OP_READ', 'ALU_GE', 'ALU_SUB', 'illegal_c_insn_i', 'RF_WD_EX', 'IMM_B_U', 'illegal_insn', 'OP_B_REG_B', '\
ALU_LT', 'CSR_OP_WRITE', 'CSR_OP_SET', 'IMM_A_Z', 'opcode', 'ALU_GEU', 'ALU_XOR', 'ALU_LTU']"];
	"decoder_i.420:AS" -> "decoder_i.453:AL";
	"decoder_i.424:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3971e10>",
		def_var="['imm_u_type_o']",
		fillcolor=deepskyblue,
		label="decoder_i.424:AS
imm_u_type_o = { instr[31:12], 12'b0 };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr']"];
	"decoder_i.420:AS" -> "decoder_i.424:AS";
	"decoder_i.427:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf399a990>",
		def_var="['regfile_raddr_a_o']",
		fillcolor=deepskyblue,
		label="decoder_i.427:AS
regfile_raddr_a_o = instr[19:15];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr']"];
	"decoder_i.420:AS" -> "decoder_i.427:AS";
	"decoder_i.425:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf399a4d0>",
		def_var="['imm_j_type_o']",
		fillcolor=deepskyblue,
		label="decoder_i.425:AS
imm_j_type_o = { { 12{ instr[31] } }, instr[19:12], instr[20], instr[30:21], 1'b0 };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr', 'instr', 'instr', 'instr']"];
	"decoder_i.420:AS" -> "decoder_i.425:AS";
	"728:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363c3d0>",
		def_var="['data_sign_ext_ex_o']",
		fillcolor=deepskyblue,
		label="728:AS
data_sign_ext_ex_o = data_sign_ext_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['data_sign_ext_id']"];
	"controller_i.694:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3860910>",
		fillcolor=lightcyan,
		label="controller_i.694:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.694:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3860dd0>",
		fillcolor=turquoise,
		label="controller_i.694:BL
halt_if = 1'b1;
flush_id = 1'b1;
ctrl_fsm_ns = DECODE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860b50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860cd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860e10>]",
		style=filled,
		typ=Block];
	"controller_i.694:CA" -> "controller_i.694:BL"	 [cond="[]",
		lineno=None];
	"controller_i.605:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3858b10>",
		fillcolor=springgreen,
		label="controller_i.605:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.605:IF" -> "controller_i.605:BL"	 [cond="['handle_irq']",
		label=handle_irq,
		lineno=605];
	"decoder_i.732:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43710>",
		fillcolor=cadetblue,
		label="decoder_i.732:BS
wfi_insn_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43710>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.Leaf_453:AL"	 [def_var="['data_req_o', 'csr_access_o', 'jump_in_dec_o', 'illegal_insn', 'dret_insn_o', 'regfile_we', 'csr_illegal', 'branch_in_dec_o', '\
imm_b_mux_sel_o', 'ecall_insn_o', 'data_type_o', 'data_we_o', 'csr_op', 'alu_operator_o', 'regfile_wdata_sel_o', 'wfi_insn_o', '\
multdiv_signed_mode_o', 'ebrk_insn_o', 'div_en_o', 'data_sign_extension_o', 'alu_op_b_mux_sel_o', 'jump_set_o', 'multdiv_operator_\
o', 'imm_a_mux_sel_o', 'opcode', 'mult_en_o', 'alu_op_a_mux_sel_o', 'mret_insn_o']",
		label="decoder_i.Leaf_453:AL"];
	"decoder_i.732:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.714:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e70950>",
		fillcolor=springgreen,
		label="controller_i.714:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.714:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e70990>",
		fillcolor=turquoise,
		label="controller_i.714:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"controller_i.714:IF" -> "controller_i.714:BL"	 [cond="['ebrk_insn']",
		label=ebrk_insn,
		lineno=714];
	"controller_i.725:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e6f890>",
		fillcolor=springgreen,
		label="controller_i.725:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.714:IF" -> "controller_i.725:IF"	 [cond="['ebrk_insn']",
		label="!(ebrk_insn)",
		lineno=714];
	"decoder_i.560:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c72bd0>",
		fillcolor=lightcyan,
		label="decoder_i.560:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.560:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72cd0>",
		fillcolor=cadetblue,
		label="decoder_i.560:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72cd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.560:CA" -> "decoder_i.560:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.453:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c4d990>",
		fillcolor=turquoise,
		label="decoder_i.453:BL
jump_in_dec_o = 1'b0;
jump_set_o = 1'b0;
branch_in_dec_o = 1'b0;
alu_operator_o = ALU_SLTU;
alu_op_a_mux_sel_o = \
OP_A_IMM;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_a_mux_sel_o = IMM_A_ZERO;
imm_b_mux_sel_o = IMM_B_I;
mult_en_o = 1'b0;
div_en_o = 1'\
b0;
multdiv_operator_o = MD_OP_MULL;
multdiv_signed_mode_o = 2'b00;
regfile_wdata_sel_o = RF_WD_EX;
regfile_we = 1'b0;
csr_access_\
o = 1'b0;
csr_illegal = 1'b0;
csr_op = CSR_OP_READ;
data_we_o = 1'b0;
data_type_o = 2'b00;
data_sign_extension_o = 1'b0;
data_req_\
o = 1'b0;
illegal_insn = 1'b0;
ebrk_insn_o = 1'b0;
mret_insn_o = 1'b0;
dret_insn_o = 1'b0;
ecall_insn_o = 1'b0;
wfi_insn_o = 1'b0;
\
opcode = sv2v_cast_DB892(instr[6:0]);",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a01d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a03d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0550>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a06d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0850>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a09d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0b50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0cd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0e10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0f50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976110>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976290>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976410>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976550>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39766d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976810>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976950>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976a90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976bd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976d50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3976e90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3974050>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3974190>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39742d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3974410>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3974590>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39746d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39749d0>]",
		style=filled,
		typ=Block];
	"decoder_i.453:BL" -> "decoder_i.482:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.761:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c4d9d0>",
		fillcolor=springgreen,
		label="decoder_i.761:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.453:BL" -> "decoder_i.761:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.759:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c4d810>",
		fillcolor=springgreen,
		label="decoder_i.759:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.453:BL" -> "decoder_i.759:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.718:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c3e2d0>",
		fillcolor=springgreen,
		label="decoder_i.718:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.711:BL" -> "decoder_i.718:IF"	 [cond="[]",
		lineno=None];
	"765:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3661850>",
		fillcolor=lightcyan,
		label="765:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"766:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3661910>",
		fillcolor=springgreen,
		label="766:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"765:CA" -> "766:IF"	 [cond="[]",
		lineno=None];
	"controller_i.542:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3838d10>",
		fillcolor=springgreen,
		label="controller_i.542:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.544:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3839050>",
		fillcolor=springgreen,
		label="controller_i.544:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.542:IF" -> "controller_i.544:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[2])",
		lineno=542];
	"controller_i.543:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838d50>",
		fillcolor=cadetblue,
		label="controller_i.543:BS
mfip_id = 4'd2;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838d50>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.542:IF" -> "controller_i.543:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[2]",
		lineno=542];
	"741:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf366ea90>",
		clk_sens=True,
		fillcolor=gold,
		label="741:AL",
		sens="['clk_i', 'rst_ni']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['id_wb_fsm_ns', 'IDLE', 'rst_ni', 'instr_multicycle_done_n', 'branch_set_n']"];
	"741:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf366ebd0>",
		fillcolor=turquoise,
		label="741:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"741:AL" -> "741:BL"	 [cond="[]",
		lineno=None];
	"controller_i.617:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3856750>",
		fillcolor=turquoise,
		label="controller_i.617:BL
ctrl_fsm_ns = FLUSH;
halt_if = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3856790>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38568d0>]",
		style=filled,
		typ=Block];
	"controller_i.617:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.704:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3861b50>",
		fillcolor=turquoise,
		label="controller_i.704:BL
exc_cause_o = EXC_CAUSE_INSTR_ACCESS_FAULT;
csr_mtval_o = pc_id_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3861b90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3861cd0>]",
		style=filled,
		typ=Block];
	"controller_i.704:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.485:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3978610>",
		fillcolor=turquoise,
		label="decoder_i.485:BL
alu_op_a_mux_sel_o = OP_A_CURRPC;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_J;
alu_operator_o = ALU_\
ADD;
regfile_we = 1'b0;
jump_set_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978050>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978210>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978390>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978510>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978650>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978790>]",
		style=filled,
		typ=Block];
	"decoder_i.485:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.563:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c77b90>",
		fillcolor=turquoise,
		label="decoder_i.563:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
data_req_o = 1'b1;
regfile_wdata_sel_o = RF_WD_LSU;
regfile_we = 1'b1;
data_type_\
o = 2'b00;
alu_operator_o = ALU_ADD;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_I;
data_sign_extension_o = ~instr[14];",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72e90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77050>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c771d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77310>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77450>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c775d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77750>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c778d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77b10>]",
		style=filled,
		typ=Block];
	"decoder_i.573:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c7c450>",
		fillcolor=linen,
		label="decoder_i.573:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.563:BL" -> "decoder_i.573:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.700:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c34e10>",
		fillcolor=lightcyan,
		label="decoder_i.700:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.700:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34f10>",
		fillcolor=cadetblue,
		label="decoder_i.700:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34f10>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.700:CA" -> "decoder_i.700:BS"	 [cond="[]",
		lineno=None];
	"767:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3657a10>",
		fillcolor=linen,
		label="767:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"766:IF" -> "767:CS"	 [cond="['instr_new_i', 'instr_fetch_err_i']",
		label="(instr_new_i & ~instr_fetch_err_i)",
		lineno=766];
	"controller_i.764:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3a62a50>",
		clk_sens=True,
		fillcolor=gold,
		label="controller_i.764:AL",
		sens="['clk_i', 'rst_ni']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['RESET', 'rst_ni', 'exc_req_d', 'nmi_mode_d', 'illegal_insn_d', 'ctrl_fsm_ns', 'load_err_d', 'debug_mode_d', 'store_err_d']"];
	"controller_i.764:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3a62b50>",
		fillcolor=turquoise,
		label="controller_i.764:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"controller_i.764:AL" -> "controller_i.764:BL"	 [cond="[]",
		lineno=None];
	"controller_i.657:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c410>",
		fillcolor=cadetblue,
		label="controller_i.657:BS
exc_cause_o = EXC_CAUSE_IRQ_SOFTWARE_M;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c410>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.657:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.651:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9f550>",
		fillcolor=lightcyan,
		label="decoder_i.651:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.651:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c9fc10>",
		fillcolor=turquoise,
		label="decoder_i.651:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_MULH;
mult_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b11;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9f710>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9f8d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9fb10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9fc50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9fed0>]",
		style=filled,
		typ=Block];
	"decoder_i.651:CA" -> "decoder_i.651:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.432:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf39ac950>",
		def_var="['illegal_reg_rv32e']",
		fillcolor=deepskyblue,
		label="decoder_i.432:AS
illegal_reg_rv32e = regfile_raddr_a_o[4] & (alu_op_a_mux_sel_o == OP_A_REG_A) | regfile_raddr_b_o[4] & (alu_op_\
b_mux_sel_o == OP_B_REG_B) | regfile_waddr_o[4] & regfile_we;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_raddr_a_o', 'alu_op_a_mux_sel_o', 'OP_A_REG_A', 'regfile_raddr_b_o', 'alu_op_b_mux_sel_o', 'OP_B_REG_B', 'regfile_waddr_\
o', 'regfile_we']"];
	"decoder_i.428:AS" -> "decoder_i.432:AS";
	"610:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e22f10>",
		def_var="['rfvi_reg_raddr_rb_o']",
		fillcolor=deepskyblue,
		label="610:AS
rfvi_reg_raddr_rb_o = regfile_raddr_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_raddr_b']"];
	"decoder_i.428:AS" -> "610:AS";
	"controller_i.648:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf386ea90>",
		fillcolor=springgreen,
		label="controller_i.648:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.652:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf386ee50>",
		fillcolor=springgreen,
		label="controller_i.652:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.648:IF" -> "controller_i.652:IF"	 [cond="['irq_nm_i', 'nmi_mode_q']",
		label="!((irq_nm_i && !nmi_mode_q))",
		lineno=648];
	"controller_i.648:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf386e890>",
		fillcolor=turquoise,
		label="controller_i.648:BL
exc_cause_o = EXC_CAUSE_IRQ_NM;
nmi_mode_d = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386e8d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386ea10>]",
		style=filled,
		typ=Block];
	"controller_i.648:IF" -> "controller_i.648:BL"	 [cond="['irq_nm_i', 'nmi_mode_q']",
		label="(irq_nm_i && !nmi_mode_q)",
		lineno=648];
	"796:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3657dd0>",
		fillcolor=lightcyan,
		label="796:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"797:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3667890>",
		fillcolor=springgreen,
		label="797:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"796:CA" -> "797:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.774:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3c52b50>",
		def_var="['regfile_we_o']",
		fillcolor=deepskyblue,
		label="decoder_i.774:AS
regfile_we_o = regfile_we & ~illegal_reg_rv32e;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_we', 'illegal_reg_rv32e']"];
	"decoder_i.774:AS" -> "587:AS";
	"753:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3649150>",
		clk_sens=False,
		fillcolor=gold,
		label="753:AL",
		sens="['data_req_dec', 'lsu_load_err_i', 'instr_multicycle_done_q', 'regfile_we_dec', 'WAIT_MULTICYCLE', 'multdiv_en_dec', 'IDLE', 'branch_\
decision_i', 'branch_in_dec', 'id_wb_fsm_cs', 'jump_in_dec']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['data_req_dec', 'lsu_load_err_i', 'instr_multicycle_done_q', 'regfile_we_dec', 'lsu_valid_i', 'instr_fetch_err_i', 'instr_new_i', '\
multdiv_en_dec', 'IDLE', 'branch_decision_i', 'WAIT_MULTICYCLE', 'branch_in_dec', 'id_wb_fsm_cs', 'jump_in_dec', 'ex_valid_i']"];
	"decoder_i.774:AS" -> "753:AL";
	"decoder_i.528:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf39934d0>",
		fillcolor=lightcyan,
		label="decoder_i.528:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.528:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39935d0>",
		fillcolor=cadetblue,
		label="decoder_i.528:BS
alu_operator_o = ALU_LTU;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39935d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.528:CA" -> "decoder_i.528:BS"	 [cond="[]",
		lineno=None];
	"controller_i.500:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8c490>",
		def_var="['mret_insn']",
		fillcolor=deepskyblue,
		label="controller_i.500:AS
mret_insn = mret_insn_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['mret_insn_i', 'instr_valid_i']"];
	"controller_i.550:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3facc10>",
		clk_sens=False,
		fillcolor=gold,
		label="controller_i.550:AL",
		sens="['sv2v_cast_89EA8', 'DBG_CAUSE_STEP', 'EXC_PC_DBG_EXC', 'EXC_CAUSE_BREAKPOINT', 'EXC_CAUSE_IRQ_TIMER_M', 'EXC_CAUSE_STORE_ACCESS_\
FAULT', 'EXC_PC_EXC', 'EXC_CAUSE_IRQ_NM', 'instr_compressed_i', 'PC_JUMP', 'mfip_id', 'DBG_TAKEN_ID', 'instr_i', 'EXC_CAUSE_ECALL_\
MMODE', 'branch_set_i', 'EXC_CAUSE_LOAD_ACCESS_FAULT', 'EXC_CAUSE_IRQ_EXTERNAL_M', 'DBG_CAUSE_HALTREQ', 'DECODE', 'EXC_PC_IRQ', '\
EXC_CAUSE_INSTR_ACCESS_FAULT', 'BOOT_SET', 'PRIV_LVL_M', 'EXC_CAUSE_ECALL_UMODE', 'debug_mode_q', 'DBG_CAUSE_EBREAK', 'PC_BOOT', '\
lsu_addr_last_i', 'DBG_TAKEN_IF', 'PC_DRET', 'IRQ_TAKEN', 'pc_id_i', 'ctrl_fsm_cs', 'nmi_mode_q', 'instr_is_compressed_i', 'EXC_\
CAUSE_IRQ_SOFTWARE_M', 'jump_set_i', 'FIRST_FETCH', 'WAIT_SLEEP', 'priv_mode_i', 'PC_EXC', 'EXC_PC_DBD', 'PC_ERET', 'SLEEP', 'FLUSH', '\
EXC_CAUSE_INSN_ADDR_MISA', 'EXC_CAUSE_ILLEGAL_INSN']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['irq_pending_i', 'sv2v_cast_89EA8', 'csr_pipe_flush', 'handle_irq', 'DBG_CAUSE_STEP', 'EXC_CAUSE_IRQ_NM', 'EXC_CAUSE_BREAKPOINT', '\
EXC_CAUSE_IRQ_TIMER_M', 'enter_debug_mode', 'nmi_mode_q', 'EXC_PC_EXC', 'debug_single_step_i', 'EXC_PC_DBG_EXC', 'instr_compressed_\
i', 'PC_JUMP', 'mret_insn', 'PC_BOOT', 'id_in_ready_o', 'mfip_id', 'irq_nm_i', 'DBG_TAKEN_ID', 'instr_fetch_err', 'instr_i', 'EXC_\
CAUSE_ECALL_MMODE', 'branch_set_i', 'EXC_CAUSE_LOAD_ACCESS_FAULT', 'EXC_CAUSE_IRQ_EXTERNAL_M', 'DBG_CAUSE_HALTREQ', 'DECODE', 'EXC_\
PC_IRQ', 'EXC_CAUSE_INSTR_ACCESS_FAULT', 'BOOT_SET', 'PRIV_LVL_M', 'csr_mfip_i', 'exc_req_q', 'debug_req_i', 'debug_mode_q', 'DBG_\
CAUSE_EBREAK', 'illegal_insn_q', 'lsu_addr_last_i', 'DBG_TAKEN_IF', 'PC_DRET', 'csr_msip_i', 'dret_insn', 'instr_valid_i', 'pc_id_\
i', 'PC_ERET', 'ctrl_fsm_cs', 'FLUSH', 'fetch_enable_i', 'special_req', 'EXC_CAUSE_STORE_ACCESS_FAULT', 'ebrk_insn', 'instr_is_compressed_\
i', 'EXC_CAUSE_IRQ_SOFTWARE_M', 'csr_meip_i', 'store_err_q', 'ebreak_into_debug', 'jump_set_i', 'FIRST_FETCH', 'WAIT_SLEEP', 'load_\
err_q', 'priv_mode_i', 'wfi_insn', 'PC_EXC', 'EXC_PC_DBD', 'ecall_insn', 'stall', 'SLEEP', 'EXC_CAUSE_ECALL_UMODE', 'IRQ_TAKEN', '\
EXC_CAUSE_INSN_ADDR_MISA', 'EXC_CAUSE_ILLEGAL_INSN']"];
	"controller_i.500:AS" -> "controller_i.550:AL";
	"controller_i.511:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fab510>",
		def_var="['special_req']",
		fillcolor=deepskyblue,
		label="controller_i.511:AS
special_req = mret_insn | dret_insn | wfi_insn | csr_pipe_flush | exc_req_d | exc_req_lsu;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['mret_insn', 'dret_insn', 'wfi_insn', 'csr_pipe_flush', 'exc_req_d', 'exc_req_lsu']"];
	"controller_i.500:AS" -> "controller_i.511:AS";
	"controller_i.507:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fa8610>",
		def_var="['illegal_umode']",
		fillcolor=deepskyblue,
		label="controller_i.507:AS
illegal_umode = (priv_mode_i != PRIV_LVL_M) & (mret_insn | csr_mstatus_tw_i & wfi_insn);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['priv_mode_i', 'PRIV_LVL_M', 'mret_insn', 'csr_mstatus_tw_i', 'wfi_insn']"];
	"controller_i.500:AS" -> "controller_i.507:AS";
	"decoder_i.705:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c39110>",
		fillcolor=lightcyan,
		label="decoder_i.705:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.705:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c395d0>",
		fillcolor=turquoise,
		label="decoder_i.705:BL
alu_operator_o = ALU_ADD;
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_IMM;
regfile_we = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c392d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c39490>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c39610>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c39750>]",
		style=filled,
		typ=Block];
	"decoder_i.705:CA" -> "decoder_i.705:BL"	 [cond="[]",
		lineno=None];
	"controller_i.663:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf385c650>",
		fillcolor=turquoise,
		label="controller_i.663:BL
ctrl_fsm_ns = DECODE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865790>]",
		style=filled,
		typ=Block];
	"controller_i.664:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf385c690>",
		fillcolor=springgreen,
		label="controller_i.664:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.663:BL" -> "controller_i.664:IF"	 [cond="[]",
		lineno=None];
	"controller_i.663:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf386ef50>",
		fillcolor=lightcyan,
		label="controller_i.663:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.663:CA" -> "controller_i.663:BL"	 [cond="[]",
		lineno=None];
	"controller_i.664:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf38650d0>",
		fillcolor=turquoise,
		label="controller_i.664:BL
flush_id = 1'b1;
pc_mux_o = PC_EXC;
pc_set_o = 1'b1;
exc_pc_mux_o = EXC_PC_DBD;
csr_save_if_o = 1'b1;
debug_\
csr_save_o = 1'b1;
csr_save_cause_o = 1'b1;
debug_mode_d = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c810>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c990>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385cad0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385cc50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385cdd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385cf50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865110>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38656d0>]",
		style=filled,
		typ=Block];
	"controller_i.664:IF" -> "controller_i.664:BL"	 [cond="['debug_single_step_i', 'debug_req_i']",
		label="(debug_single_step_i || debug_req_i)",
		lineno=664];
	"decoder_i.432:AS" -> "decoder_i.774:AS";
	"decoder_i.773:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3c528d0>",
		def_var="['illegal_insn_o']",
		fillcolor=deepskyblue,
		label="decoder_i.773:AS
illegal_insn_o = illegal_insn | illegal_reg_rv32e;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['illegal_insn', 'illegal_reg_rv32e']"];
	"decoder_i.432:AS" -> "decoder_i.773:AS";
	"decoder_i.731:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c43410>",
		fillcolor=lightcyan,
		label="decoder_i.731:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.731:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43510>",
		fillcolor=cadetblue,
		label="decoder_i.731:BS
dret_insn_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43510>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.731:CA" -> "decoder_i.731:BS"	 [cond="[]",
		lineno=None];
	"controller_i.754:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3eacc50>",
		fillcolor=turquoise,
		label="controller_i.754:BL
instr_req_o = 1'b0;
ctrl_fsm_ns = 1'bX;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eaccd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eace10>]",
		style=filled,
		typ=Block];
	"controller_i.754:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.745:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c48ad0>",
		fillcolor=springgreen,
		label="decoder_i.745:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.748:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48bd0>",
		fillcolor=cadetblue,
		label="decoder_i.748:BS
alu_op_a_mux_sel_o = OP_A_REG_A;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48bd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.745:IF" -> "decoder_i.748:BS"	 [cond="['instr']",
		label="!(instr[14])",
		lineno=745];
	"decoder_i.746:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48a10>",
		fillcolor=cadetblue,
		label="decoder_i.746:BS
alu_op_a_mux_sel_o = OP_A_IMM;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48a10>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.745:IF" -> "decoder_i.746:BS"	 [cond="['instr']",
		label="instr[14]",
		lineno=745];
	"decoder_i.721:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c3e450>",
		fillcolor=lightcyan,
		label="decoder_i.721:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.721:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e590>",
		fillcolor=cadetblue,
		label="decoder_i.721:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e590>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.721:CA" -> "decoder_i.721:BS"	 [cond="[]",
		lineno=None];
	"Leaf_741:AL"	 [def_var="['branch_set_q', 'instr_multicycle_done_q', 'id_wb_fsm_cs']",
		label="Leaf_741:AL"];
	"Leaf_741:AL" -> "controller_i.550:AL";
	"721:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e25690>",
		def_var="['instr_executing']",
		fillcolor=deepskyblue,
		label="721:AS
instr_executing = (instr_new_i | instr_multicycle & ~instr_multicycle_done_q) & ~instr_fetch_err_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_new_i', 'instr_multicycle', 'instr_multicycle_done_q', 'instr_fetch_err_i']"];
	"Leaf_741:AL" -> "721:AS";
	"Leaf_741:AL" -> "753:AL";
	"decoder_i.719:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e410>",
		fillcolor=cadetblue,
		label="decoder_i.719:BS
jump_set_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e410>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.719:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.675:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865610>",
		fillcolor=cadetblue,
		label="controller_i.675:BS
debug_cause_o = DBG_CAUSE_HALTREQ;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865610>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.675:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.731:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.528:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3f757d0>",
		fillcolor=springgreen,
		label="controller_i.528:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.529:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75810>",
		fillcolor=cadetblue,
		label="controller_i.529:BS
mfip_id = 4'd8;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75810>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.528:IF" -> "controller_i.529:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[8]",
		lineno=528];
	"controller_i.530:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3f75ad0>",
		fillcolor=springgreen,
		label="controller_i.530:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.528:IF" -> "controller_i.530:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[8])",
		lineno=528];
	"581:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa990>",
		fillcolor=cadetblue,
		label="581:BS
imm_b = (instr_is_compressed_i)? 32'h2 : 32'h4;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa990>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_574:AL"	 [def_var="['imm_b']",
		label="Leaf_574:AL"];
	"581:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.443:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39aa5d0>",
		fillcolor=turquoise,
		label="decoder_i.443:BL
csr_pipe_flush_o = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39aa550>]",
		style=filled,
		typ=Block];
	"decoder_i.443:AL" -> "decoder_i.443:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.665:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3ca5a10>",
		fillcolor=lightcyan,
		label="decoder_i.665:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.665:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3caa110>",
		fillcolor=turquoise,
		label="decoder_i.665:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_MULH;
mult_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b00;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5bd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5d90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5fd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caa150>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caa3d0>]",
		style=filled,
		typ=Block];
	"decoder_i.665:CA" -> "decoder_i.665:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.606:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86710>",
		fillcolor=cadetblue,
		label="decoder_i.606:BS
alu_operator_o = ALU_SLT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86710>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.606:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"611:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e14110>",
		def_var="['rfvi_reg_rdata_rb_o']",
		fillcolor=deepskyblue,
		label="611:AS
rfvi_reg_rdata_rb_o = regfile_rdata_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_rdata_b']"];
	"decoder_i.626:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c91810>",
		fillcolor=turquoise,
		label="decoder_i.626:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_REG_B;
regfile_we = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91490>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91650>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91790>]",
		style=filled,
		typ=Block];
	"decoder_i.630:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c91ad0>",
		fillcolor=springgreen,
		label="decoder_i.630:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.626:BL" -> "decoder_i.630:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.634:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95090>",
		fillcolor=cadetblue,
		label="decoder_i.634:BS
alu_operator_o = ALU_ADD;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95090>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.634:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.733:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c43810>",
		fillcolor=lightcyan,
		label="decoder_i.733:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.733:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43910>",
		fillcolor=cadetblue,
		label="decoder_i.733:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43910>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.733:CA" -> "decoder_i.733:BS"	 [cond="[]",
		lineno=None];
	"561:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3df42d0>",
		def_var="['alu_op_a_mux_sel']",
		fillcolor=deepskyblue,
		label="561:AS
alu_op_a_mux_sel = (lsu_addr_incr_req_i)? OP_A_FWD : alu_op_a_mux_sel_dec;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['lsu_addr_incr_req_i', 'OP_A_FWD', 'alu_op_a_mux_sel_dec']"];
	"565:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3df4c50>",
		clk_sens=False,
		fillcolor=gold,
		label="565:AL",
		sens="['imm_a', 'regfile_rdata_a', 'lsu_addr_last_i', 'pc_id_i']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['regfile_rdata_a', 'imm_a', 'alu_op_a_mux_sel', 'pc_id_i', 'lsu_addr_last_i']"];
	"561:AS" -> "565:AL";
	"decoder_i.518:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf39a7590>",
		fillcolor=springgreen,
		label="decoder_i.518:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.519:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a76d0>",
		fillcolor=cadetblue,
		label="decoder_i.519:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a76d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.518:IF" -> "decoder_i.519:BS"	 [cond="['instr']",
		label="(instr[14:12] != 3'b0)",
		lineno=518];
	"decoder_i.605:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86490>",
		fillcolor=cadetblue,
		label="decoder_i.605:BS
alu_operator_o = ALU_ADD;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86490>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.605:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.760:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d910>",
		fillcolor=cadetblue,
		label="decoder_i.760:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d910>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.760:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"747:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf36494d0>",
		fillcolor=turquoise,
		label="747:BL
id_wb_fsm_cs <= id_wb_fsm_ns;
branch_set_q <= branch_set_n;
instr_multicycle_done_q <= instr_multicycle_done_n;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3649350>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7feaf3649510>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf36496d0>]",
		style=filled,
		typ=Block];
	"747:BL" -> "Leaf_741:AL"	 [cond="[]",
		lineno=None];
	"controller_i.521:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3facbd0>",
		fillcolor=cadetblue,
		label="controller_i.521:BS
mfip_id = 4'd12;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3facbd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.521:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.531:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75b10>",
		fillcolor=cadetblue,
		label="controller_i.531:BS
mfip_id = 4'd7;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75b10>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.531:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.544:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3989cd0>",
		fillcolor=turquoise,
		label="decoder_i.544:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_REG_B;
data_req_o = 1'b1;
data_we_o = 1'b1;
alu_operator_\
o = ALU_ADD;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989750>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989910>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989a50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989b90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989d10>]",
		style=filled,
		typ=Block];
	"decoder_i.544:CA" -> "decoder_i.544:BL"	 [cond="[]",
		lineno=None];
	"registers_i.Leaf_48:AL"	 [def_var="['rf_reg_tmp']",
		label="registers_i.Leaf_48:AL"];
	"registers_i.58:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3db7350>",
		def_var="['rf_reg']",
		fillcolor=deepskyblue,
		label="registers_i.58:AS
rf_reg[((DataWidth-1>=0)?DataWidth:2-DataWidth)+((NUM_WORDS-1>=1)?NUM_WORDS-1:3-NUM_WORDS)*((DataWidth-1>=0)?DataWidth:\
2-DataWidth)-1:(DataWidth-1>=0)?DataWidth:2-DataWidth] = rf_reg_tmp[((DataWidth-1>=0)?DataWidth:2-DataWidth)+((NUM_WORDS-1>=1)?NUM_\
WORDS-1:3-NUM_WORDS)*((DataWidth-1>=0)?DataWidth:2-DataWidth)-1:(DataWidth-1>=0)?DataWidth:2-DataWidth];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['rf_reg_tmp', 'NUM_WORDS', 'NUM_WORDS', 'NUM_WORDS', 'DataWidth', 'DataWidth', 'DataWidth', 'DataWidth']"];
	"registers_i.Leaf_48:AL" -> "registers_i.58:AS";
	"controller_i.580:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf384ff10>",
		fillcolor=lightcyan,
		label="controller_i.580:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.580:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf384c3d0>",
		fillcolor=turquoise,
		label="controller_i.580:BL
instr_req_o = 1'b1;
pc_mux_o = PC_BOOT;
pc_set_o = 1'b1;
ctrl_fsm_ns = FIRST_FETCH;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c150>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c2d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c410>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c550>]",
		style=filled,
		typ=Block];
	"controller_i.580:CA" -> "controller_i.580:BL"	 [cond="[]",
		lineno=None];
	"583:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3dfac50>",
		fillcolor=lightcyan,
		label="583:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"583:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfad50>",
		fillcolor=cadetblue,
		label="583:BS
imm_b = 1'bX;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfad50>]",
		style=filled,
		typ=BlockingSubstitution];
	"583:CA" -> "583:BS"	 [cond="[]",
		lineno=None];
	"controller_i.578:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384ff50>",
		fillcolor=cadetblue,
		label="controller_i.578:BS
ctrl_fsm_ns = BOOT_SET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384ff50>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.578:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.736:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43dd0>",
		fillcolor=cadetblue,
		label="decoder_i.736:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43dd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.736:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"579:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3dfa310>",
		fillcolor=lightcyan,
		label="579:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"579:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa410>",
		fillcolor=cadetblue,
		label="579:BS
imm_b = imm_u_type;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa410>]",
		style=filled,
		typ=BlockingSubstitution];
	"579:CA" -> "579:BS"	 [cond="[]",
		lineno=None];
	"controller_i.685:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3865f50>",
		fillcolor=springgreen,
		label="controller_i.685:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.685:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3860510>",
		fillcolor=turquoise,
		label="controller_i.685:BL
csr_save_cause_o = 1'b1;
csr_save_id_o = 1'b1;
debug_csr_save_o = 1'b1;
debug_cause_o = DBG_CAUSE_EBREAK;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860250>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38603d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860550>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860710>]",
		style=filled,
		typ=Block];
	"controller_i.685:IF" -> "controller_i.685:BL"	 [cond="['ebreak_into_debug', 'debug_mode_q']",
		label="(ebreak_into_debug && !debug_mode_q)",
		lineno=685];
	"decoder_i.728:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3eed0>",
		fillcolor=cadetblue,
		label="decoder_i.728:BS
ecall_insn_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3eed0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.728:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.641:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3846850>",
		fillcolor=turquoise,
		label="controller_i.641:BL
ctrl_fsm_ns = DECODE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386ec50>]",
		style=filled,
		typ=Block];
	"controller_i.642:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3846990>",
		fillcolor=springgreen,
		label="controller_i.642:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.641:BL" -> "controller_i.642:IF"	 [cond="[]",
		lineno=None];
	"564:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3df4a10>",
		def_var="['imm_a']",
		fillcolor=deepskyblue,
		label="564:AS
imm_a = (imm_a_mux_sel == IMM_A_Z)? zimm_rs1_type : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['imm_a_mux_sel', 'IMM_A_Z', 'zimm_rs1_type']"];
	"564:AS" -> "565:AL";
	"decoder_i.527:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993390>",
		fillcolor=cadetblue,
		label="decoder_i.527:BS
alu_operator_o = ALU_GE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993390>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.527:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"576:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16dd0>",
		fillcolor=cadetblue,
		label="576:BS
imm_b = imm_i_type;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16dd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"576:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.610:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86fd0>",
		fillcolor=cadetblue,
		label="decoder_i.610:BS
alu_operator_o = ALU_AND;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86fd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.610:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.659:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c5d0>",
		fillcolor=cadetblue,
		label="controller_i.659:BS
exc_cause_o = EXC_CAUSE_IRQ_TIMER_M;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c5d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.659:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.550:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c72310>",
		fillcolor=springgreen,
		label="decoder_i.550:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.555:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72410>",
		fillcolor=cadetblue,
		label="decoder_i.555:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72410>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.550:IF" -> "decoder_i.555:BS"	 [cond="['instr']",
		label="!((!instr[14]))",
		lineno=550];
	"decoder_i.550:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c72090>",
		fillcolor=turquoise,
		label="decoder_i.550:BL
imm_b_mux_sel_o = IMM_B_S;
alu_op_b_mux_sel_o = OP_B_IMM;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c720d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72250>]",
		style=filled,
		typ=Block];
	"decoder_i.550:IF" -> "decoder_i.550:BL"	 [cond="['instr']",
		label="(!instr[14])",
		lineno=550];
	"732:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363cad0>",
		def_var="['alu_operand_b_ex_o']",
		fillcolor=deepskyblue,
		label="732:AS
alu_operand_b_ex_o = alu_operand_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['alu_operand_b']"];
	"decoder_i.558:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c72810>",
		fillcolor=lightcyan,
		label="decoder_i.558:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.558:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72910>",
		fillcolor=cadetblue,
		label="decoder_i.558:BS
data_type_o = 2'b01;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72910>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.558:CA" -> "decoder_i.558:BS"	 [cond="[]",
		lineno=None];
	"593:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e22210>",
		fillcolor=cadetblue,
		label="593:BS
regfile_wdata = 1'bX;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e22210>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_588:AL"	 [def_var="['regfile_wdata']",
		label="Leaf_588:AL"];
	"593:BS" -> "Leaf_588:AL"	 [cond="[]",
		lineno=None];
	"Leaf_753:AL"	 [def_var="['id_wb_fsm_ns', 'stall_branch', 'perf_branch_o', 'instr_ret_o', 'branch_set_n', 'stall_multdiv', 'stall_lsu', 'stall_jump', 'regfile_\
we_wb', 'instr_multicycle_done_n']",
		label="Leaf_753:AL"];
	"773:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.748:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.502:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8c890>",
		def_var="['wfi_insn']",
		fillcolor=deepskyblue,
		label="controller_i.502:AS
wfi_insn = wfi_insn_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['wfi_insn_i', 'instr_valid_i']"];
	"controller_i.502:AS" -> "controller_i.550:AL";
	"controller_i.502:AS" -> "controller_i.511:AS";
	"controller_i.502:AS" -> "controller_i.507:AS";
	"decoder_i.511:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39a7250>",
		fillcolor=turquoise,
		label="decoder_i.511:BL
alu_op_a_mux_sel_o = OP_A_CURRPC;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_INCR_PC;
alu_operator_\
o = ALU_ADD;
regfile_we = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4d90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4f10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a7110>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a7290>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a73d0>]",
		style=filled,
		typ=Block];
	"decoder_i.511:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.515:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3fac290>",
		clk_sens=False,
		fillcolor=gold,
		label="controller_i.515:AL",
		sens="[]",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['csr_mfip_i']"];
	"controller_i.515:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3fac450>",
		fillcolor=turquoise,
		label="controller_i.515:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"controller_i.515:AL" -> "controller_i.515:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.686:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c2f950>",
		fillcolor=lightcyan,
		label="decoder_i.686:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.686:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c34050>",
		fillcolor=turquoise,
		label="decoder_i.686:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_REM;
div_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b11;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2fb10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2fcd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c2ff10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34090>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34310>]",
		style=filled,
		typ=Block];
	"decoder_i.686:CA" -> "decoder_i.686:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.729:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c43050>",
		fillcolor=lightcyan,
		label="decoder_i.729:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.729:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43150>",
		fillcolor=cadetblue,
		label="decoder_i.729:BS
ebrk_insn_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43150>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.729:CA" -> "decoder_i.729:BS"	 [cond="[]",
		lineno=None];
	"controller_i.Leaf_515:AL" -> "controller_i.550:AL";
	"decoder_i.426:AS" -> "564:AS";
	"controller_i.672:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf38654d0>",
		fillcolor=springgreen,
		label="controller_i.672:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.664:BL" -> "controller_i.672:IF"	 [cond="[]",
		lineno=None];
	"567:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16090>",
		fillcolor=cadetblue,
		label="567:BS
alu_operand_a = regfile_rdata_a;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16090>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_565:AL"	 [def_var="['alu_operand_a']",
		label="Leaf_565:AL"];
	"567:BS" -> "Leaf_565:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.611:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c8b0d0>",
		fillcolor=lightcyan,
		label="decoder_i.611:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.611:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c8b310>",
		fillcolor=turquoise,
		label="decoder_i.611:BL
alu_operator_o = ALU_SLL;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8b290>]",
		style=filled,
		typ=Block];
	"decoder_i.611:CA" -> "decoder_i.611:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.584:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c7cf50>",
		fillcolor=turquoise,
		label="decoder_i.584:BL
alu_op_a_mux_sel_o = OP_A_IMM;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_a_mux_sel_o = IMM_A_ZERO;
imm_b_mux_sel_o = IMM_\
B_U;
alu_operator_o = ALU_ADD;
regfile_we = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c950>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7cb10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7cc90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7ce10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7cf90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81110>]",
		style=filled,
		typ=Block];
	"decoder_i.584:CA" -> "decoder_i.584:BL"	 [cond="[]",
		lineno=None];
	"726:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363c050>",
		def_var="['data_we_ex_o']",
		fillcolor=deepskyblue,
		label="726:AS
data_we_ex_o = data_we_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['data_we_id']"];
	"controller_i.685:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"577:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa050>",
		fillcolor=cadetblue,
		label="577:BS
imm_b = imm_s_type;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa050>]",
		style=filled,
		typ=BlockingSubstitution];
	"577:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"591:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e23dd0>",
		fillcolor=cadetblue,
		label="591:BS
regfile_wdata = regfile_wdata_lsu_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e23dd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"591:BS" -> "Leaf_588:AL"	 [cond="[]",
		lineno=None];
	"controller_i.680:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3865850>",
		fillcolor=lightcyan,
		label="controller_i.680:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.680:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf38607d0>",
		fillcolor=turquoise,
		label="controller_i.680:BL
flush_id = 1'b1;
pc_mux_o = PC_EXC;
pc_set_o = 1'b1;
exc_pc_mux_o = EXC_PC_DBD;
debug_mode_d = 1'b1;
ctrl_fsm_\
ns = DECODE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38659d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865b50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865c90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865e10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860810>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3860950>]",
		style=filled,
		typ=Block];
	"controller_i.680:CA" -> "controller_i.680:BL"	 [cond="[]",
		lineno=None];
	"controller_i.631:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3846750>",
		fillcolor=turquoise,
		label="controller_i.631:BL
ctrl_fsm_ns = DBG_TAKEN_IF;
halt_if = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846710>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846890>]",
		style=filled,
		typ=Block];
	"controller_i.631:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.604:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858a50>",
		fillcolor=cadetblue,
		label="controller_i.604:BS
ctrl_fsm_ns = DECODE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858a50>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.604:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.499:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8c290>",
		def_var="['ecall_insn']",
		fillcolor=deepskyblue,
		label="controller_i.499:AS
ecall_insn = ecall_insn_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ecall_insn_i', 'instr_valid_i']"];
	"controller_i.509:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fa8f50>",
		def_var="['exc_req_d']",
		fillcolor=deepskyblue,
		label="controller_i.509:AS
exc_req_d = (ecall_insn | ebrk_insn | illegal_insn_d | instr_fetch_err) & (ctrl_fsm_cs != FLUSH);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ecall_insn', 'ebrk_insn', 'illegal_insn_d', 'instr_fetch_err', 'ctrl_fsm_cs', 'FLUSH']"];
	"controller_i.499:AS" -> "controller_i.509:AS";
	"controller_i.499:AS" -> "controller_i.550:AL";
	"decoder_i.446:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf39970d0>",
		fillcolor=springgreen,
		label="decoder_i.446:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.447:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3997190>",
		fillcolor=cadetblue,
		label="decoder_i.447:BS
csr_pipe_flush_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3997190>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.446:IF" -> "decoder_i.447:BS"	 [cond="['sv2v_cast_290A1', 'instr', 'CSR_MSTATUS', 'sv2v_cast_290A1', 'instr', 'CSR_MIE']",
		label="((sv2v_cast_290A1(instr[31:20]) == CSR_MSTATUS) || (sv2v_cast_290A1(instr[31:20]) == CSR_MIE))",
		lineno=446];
	"decoder_i.730:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43310>",
		fillcolor=cadetblue,
		label="decoder_i.730:BS
mret_insn_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43310>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.730:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.524:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf39a7b90>",
		fillcolor=lightcyan,
		label="decoder_i.524:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.524:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a7c90>",
		fillcolor=cadetblue,
		label="decoder_i.524:BS
alu_operator_o = ALU_EQ;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a7c90>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.524:CA" -> "decoder_i.524:BS"	 [cond="[]",
		lineno=None];
	"727:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363c210>",
		def_var="['data_type_ex_o']",
		fillcolor=deepskyblue,
		label="727:AS
data_type_ex_o = data_type_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['data_type_id']"];
	"decoder_i.635:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95390>",
		fillcolor=cadetblue,
		label="decoder_i.635:BS
alu_operator_o = ALU_SUB;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95390>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.635:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.752:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac750>",
		fillcolor=cadetblue,
		label="controller_i.752:BS
ctrl_fsm_ns = DBG_TAKEN_IF;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac750>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.752:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"589:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3e23f90>",
		fillcolor=linen,
		label="589:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"590:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e239d0>",
		fillcolor=lightcyan,
		label="590:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"589:CS" -> "590:CA"	 [cond="['regfile_wdata_sel']",
		label=regfile_wdata_sel,
		lineno=589];
	"593:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e22110>",
		fillcolor=lightcyan,
		label="593:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"589:CS" -> "593:CA"	 [cond="['regfile_wdata_sel']",
		label=regfile_wdata_sel,
		lineno=589];
	"592:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e23ed0>",
		fillcolor=lightcyan,
		label="592:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"589:CS" -> "592:CA"	 [cond="['regfile_wdata_sel']",
		label=regfile_wdata_sel,
		lineno=589];
	"591:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e23c90>",
		fillcolor=lightcyan,
		label="591:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"589:CS" -> "591:CA"	 [cond="['regfile_wdata_sel']",
		label=regfile_wdata_sel,
		lineno=589];
	"registers_i.41:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf364fa90>",
		clk_sens=False,
		fillcolor=gold,
		label="registers_i.41:AL",
		sens="[]",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="[]"];
	"registers_i.41:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf364f9d0>",
		fillcolor=turquoise,
		label="registers_i.41:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"registers_i.41:AL" -> "registers_i.41:BL"	 [cond="[]",
		lineno=None];
	"612:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e142d0>",
		def_var="['rfvi_reg_waddr_rd_o']",
		fillcolor=deepskyblue,
		label="612:AS
rfvi_reg_waddr_rd_o = regfile_waddr;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_waddr']"];
	"controller_i.653:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386ee90>",
		fillcolor=cadetblue,
		label="controller_i.653:BS
exc_cause_o = sv2v_cast_89EA8({ 2'b11, mfip_id });",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386ee90>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.652:IF" -> "controller_i.653:BS"	 [cond="['csr_mfip_i']",
		label="(csr_mfip_i != 15'b0)",
		lineno=652];
	"controller_i.654:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf385c110>",
		fillcolor=springgreen,
		label="controller_i.654:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.652:IF" -> "controller_i.654:IF"	 [cond="['csr_mfip_i']",
		label="!((csr_mfip_i != 15'b0))",
		lineno=652];
	"controller_i.723:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6f490>",
		fillcolor=cadetblue,
		label="controller_i.723:BS
exc_cause_o = EXC_CAUSE_BREAKPOINT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6f490>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.723:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.598:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858650>",
		fillcolor=cadetblue,
		label="controller_i.598:BS
ctrl_fsm_ns = FIRST_FETCH;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858650>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.598:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"724:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e25d50>",
		def_var="['div_en_id']",
		fillcolor=deepskyblue,
		label="724:AS
div_en_id = (instr_executing)? div_en_dec : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_executing', 'div_en_dec']"];
	"734:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363cd90>",
		def_var="['div_en_ex_o']",
		fillcolor=deepskyblue,
		label="734:AS
div_en_ex_o = div_en_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['div_en_id']"];
	"724:AS" -> "734:AS";
	"791:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3657bd0>",
		fillcolor=turquoise,
		label="791:BL
instr_multicycle_done_n = 1'b0;
instr_ret_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3657c10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3657d50>]",
		style=filled,
		typ=Block];
	"791:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.441:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39aa310>",
		fillcolor=cadetblue,
		label="decoder_i.441:BS
csr_op_o = CSR_OP_READ;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39aa310>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.Leaf_438:AL"	 [def_var="['csr_op_o']",
		label="decoder_i.Leaf_438:AL"];
	"decoder_i.441:BS" -> "decoder_i.Leaf_438:AL"	 [cond="[]",
		lineno=None];
	"608:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e22b90>",
		def_var="['rfvi_reg_raddr_ra_o']",
		fillcolor=deepskyblue,
		label="608:AS
rfvi_reg_raddr_ra_o = regfile_raddr_a;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_raddr_a']"];
	"controller_i.509:AS" -> "controller_i.764:AL";
	"controller_i.509:AS" -> "controller_i.511:AS";
	"registers_i.51:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf363f150>",
		fillcolor=turquoise,
		label="registers_i.51:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"registers_i.51:BL" -> "registers_i.Leaf_48:AL"	 [cond="[]",
		lineno=None];
	"controller_i.635:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3846c50>",
		fillcolor=turquoise,
		label="controller_i.635:BL
ctrl_fsm_ns = IRQ_TAKEN;
halt_if = 1'b1;
flush_id = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846b50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846c90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846dd0>]",
		style=filled,
		typ=Block];
	"controller_i.635:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.530:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993a10>",
		fillcolor=cadetblue,
		label="decoder_i.530:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993a10>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.530:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.734:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e6fdd0>",
		fillcolor=turquoise,
		label="controller_i.734:BL
pc_mux_o = PC_ERET;
pc_set_o = 1'b1;
csr_restore_mret_id_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70bd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6fc10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6fd50>]",
		style=filled,
		typ=Block];
	"controller_i.738:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e6fe50>",
		fillcolor=springgreen,
		label="controller_i.738:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.734:BL" -> "controller_i.738:IF"	 [cond="[]",
		lineno=None];
	"controller_i.763:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3a62850>",
		def_var="['instr_valid_clear_o']",
		fillcolor=deepskyblue,
		label="controller_i.763:AS
instr_valid_clear_o = ~(stall | halt_if) | flush_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['stall', 'halt_if', 'flush_id']"];
	"574:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3e16750>",
		clk_sens=False,
		fillcolor=gold,
		label="574:AL",
		sens="['imm_b_type', 'imm_s_type', 'imm_j_type', 'imm_u_type', 'imm_i_type', 'instr_is_compressed_i']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['imm_b_type', 'imm_s_type', 'imm_j_type', 'imm_u_type', 'imm_b_mux_sel', 'imm_i_type', 'instr_is_compressed_i']"];
	"574:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e16b90>",
		fillcolor=turquoise,
		label="574:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"574:AL" -> "574:BL"	 [cond="[]",
		lineno=None];
	"586:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3dfaf90>",
		def_var="['alu_operand_b']",
		fillcolor=deepskyblue,
		label="586:AS
alu_operand_b = (alu_op_b_mux_sel == OP_B_IMM)? imm_b : regfile_rdata_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['alu_op_b_mux_sel', 'OP_B_IMM', 'imm_b', 'regfile_rdata_b']"];
	"586:AS" -> "732:AS";
	"decoder_i.641:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9a310>",
		fillcolor=lightcyan,
		label="decoder_i.641:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.641:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a410>",
		fillcolor=cadetblue,
		label="decoder_i.641:BS
alu_operator_o = ALU_SLL;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a410>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.641:CA" -> "decoder_i.641:BS"	 [cond="[]",
		lineno=None];
	"786:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3657410>",
		fillcolor=lightcyan,
		label="786:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"786:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3657810>",
		fillcolor=turquoise,
		label="786:BL
id_wb_fsm_ns = WAIT_MULTICYCLE;
stall_jump = 1'b1;
instr_multicycle_done_n = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf36576d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3657850>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf36579d0>]",
		style=filled,
		typ=Block];
	"786:CA" -> "786:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.438:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39acd50>",
		fillcolor=turquoise,
		label="decoder_i.438:BL
csr_op_o = csr_op;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39acc90>]",
		style=filled,
		typ=Block];
	"decoder_i.440:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf39aa290>",
		fillcolor=springgreen,
		label="decoder_i.440:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.438:BL" -> "decoder_i.440:IF"	 [cond="[]",
		lineno=None];
	"590:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e23b10>",
		fillcolor=cadetblue,
		label="590:BS
regfile_wdata = regfile_wdata_ex_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e23b10>]",
		style=filled,
		typ=BlockingSubstitution];
	"590:CA" -> "590:BS"	 [cond="[]",
		lineno=None];
	"controller_i.739:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6ff90>",
		fillcolor=cadetblue,
		label="controller_i.739:BS
nmi_mode_d = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6ff90>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.739:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.774:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3a64d90>",
		fillcolor=turquoise,
		label="controller_i.774:BL
ctrl_fsm_cs <= ctrl_fsm_ns;
nmi_mode_q <= nmi_mode_d;
debug_mode_q <= debug_mode_d;
load_err_q <= load_err_d;
\
store_err_q <= store_err_d;
exc_req_q <= exc_req_d;
illegal_insn_q <= illegal_insn_d;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a64710>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7feaf3a64850>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a64a10>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7feaf3a64b50>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a64c90>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7feaf3a64dd0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a64f90>]",
		style=filled,
		typ=Block];
	"controller_i.Leaf_764:AL"	 [def_var="['debug_mode_q', 'illegal_insn_q', 'load_err_q', 'store_err_q', 'ctrl_fsm_cs', 'nmi_mode_q', 'exc_req_q']",
		label="controller_i.Leaf_764:AL"];
	"controller_i.774:BL" -> "controller_i.Leaf_764:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.616:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c8b650>",
		fillcolor=lightcyan,
		label="decoder_i.616:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.617:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c8ba10>",
		fillcolor=springgreen,
		label="decoder_i.617:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.616:CA" -> "decoder_i.617:IF"	 [cond="[]",
		lineno=None];
	"controller_i.713:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70810>",
		fillcolor=cadetblue,
		label="controller_i.713:BS
exc_cause_o = (priv_mode_i == PRIV_LVL_M)? EXC_CAUSE_ECALL_MMODE : EXC_CAUSE_ECALL_UMODE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70810>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.713:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.725:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e6f650>",
		fillcolor=turquoise,
		label="controller_i.725:BL
exc_cause_o = EXC_CAUSE_STORE_ACCESS_FAULT;
csr_mtval_o = lsu_addr_last_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6f690>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6f810>]",
		style=filled,
		typ=Block];
	"controller_i.725:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.621:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3856f10>",
		fillcolor=turquoise,
		label="controller_i.621:BL
pc_mux_o = PC_JUMP;
pc_set_o = 1'b1;
perf_tbranch_o = branch_set_i;
perf_jump_o = jump_set_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3856c50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3856d90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3856f50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38460d0>]",
		style=filled,
		typ=Block];
	"controller_i.621:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.576:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c7c150>",
		fillcolor=lightcyan,
		label="decoder_i.576:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.573:CS" -> "decoder_i.576:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=573];
	"decoder_i.581:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c7c690>",
		fillcolor=lightcyan,
		label="decoder_i.581:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.573:CS" -> "decoder_i.581:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=573];
	"decoder_i.575:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c77fd0>",
		fillcolor=lightcyan,
		label="decoder_i.575:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.573:CS" -> "decoder_i.575:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=573];
	"decoder_i.574:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c77d90>",
		fillcolor=lightcyan,
		label="decoder_i.574:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.573:CS" -> "decoder_i.574:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=573];
	"decoder_i.563:CA" -> "decoder_i.563:BL"	 [cond="[]",
		lineno=None];
	"controller_i.Leaf_550:AL" -> "controller_i.764:AL";
	"controller_i.Leaf_550:AL" -> "controller_i.763:AS";
	"controller_i.762:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3a625d0>",
		def_var="['id_in_ready_o']",
		fillcolor=deepskyblue,
		label="controller_i.762:AS
id_in_ready_o = ~stall & ~halt_if;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['stall', 'halt_if']"];
	"controller_i.Leaf_550:AL" -> "controller_i.762:AS";
	"decoder_i.609:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86d90>",
		fillcolor=cadetblue,
		label="decoder_i.609:BS
alu_operator_o = ALU_OR;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86d90>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.609:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.635:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf38469d0>",
		fillcolor=springgreen,
		label="controller_i.635:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.635:IF" -> "controller_i.635:BL"	 [cond="['handle_irq']",
		label=handle_irq,
		lineno=635];
	"controller_i.526:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3f754d0>",
		fillcolor=springgreen,
		label="controller_i.526:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.526:IF" -> "controller_i.528:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[9])",
		lineno=526];
	"controller_i.527:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75510>",
		fillcolor=cadetblue,
		label="controller_i.527:BS
mfip_id = 4'd9;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75510>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.526:IF" -> "controller_i.527:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[9]",
		lineno=526];
	"742:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3649190>",
		fillcolor=springgreen,
		label="742:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"741:BL" -> "742:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.753:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c4d410>",
		fillcolor=lightcyan,
		label="decoder_i.753:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.753:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d510>",
		fillcolor=cadetblue,
		label="decoder_i.753:BS
csr_illegal = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d510>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.753:CA" -> "decoder_i.753:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.557:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c725d0>",
		fillcolor=lightcyan,
		label="decoder_i.557:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.557:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c726d0>",
		fillcolor=cadetblue,
		label="decoder_i.557:BS
data_type_o = 2'b10;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c726d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.557:CA" -> "decoder_i.557:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.700:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.593:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf384cc10>",
		fillcolor=lightcyan,
		label="controller_i.593:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.593:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf38581d0>",
		fillcolor=turquoise,
		label="controller_i.593:BL
instr_req_o = 1'b0;
halt_if = 1'b1;
flush_id = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384ce50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384cfd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3858150>]",
		style=filled,
		typ=Block];
	"controller_i.593:CA" -> "controller_i.593:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.620:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8be50>",
		fillcolor=cadetblue,
		label="decoder_i.620:BS
alu_operator_o = ALU_SRA;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8be50>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.620:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.529:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.526:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3993050>",
		fillcolor=lightcyan,
		label="decoder_i.526:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.526:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993150>",
		fillcolor=cadetblue,
		label="decoder_i.526:BS
alu_operator_o = ALU_LT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993150>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.526:CA" -> "decoder_i.526:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.633:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c34c50>",
		fillcolor=linen,
		label="decoder_i.633:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.630:IF" -> "decoder_i.633:CS"	 [cond="['instr']",
		label="!(instr[31])",
		lineno=630];
	"decoder_i.631:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91a90>",
		fillcolor=cadetblue,
		label="decoder_i.631:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91a90>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.630:IF" -> "decoder_i.631:BS"	 [cond="['instr']",
		label="instr[31]",
		lineno=630];
	"decoder_i.644:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c9f1d0>",
		fillcolor=turquoise,
		label="decoder_i.644:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_MULL;
mult_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b00;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9ac90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9ae50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9af90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9f210>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9f490>]",
		style=filled,
		typ=Block];
	"decoder_i.644:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.623:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91310>",
		fillcolor=cadetblue,
		label="decoder_i.623:BS
alu_operator_o = sv2v_cast_F99D1({ 6{ 1'bX } });",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91310>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.623:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.577:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf384fe10>",
		fillcolor=springgreen,
		label="controller_i.577:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.577:IF" -> "controller_i.578:BS"	 [cond="['fetch_enable_i']",
		label=fetch_enable_i,
		lineno=577];
	"570:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e16690>",
		fillcolor=lightcyan,
		label="570:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"570:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16790>",
		fillcolor=cadetblue,
		label="570:BS
alu_operand_a = imm_a;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16790>]",
		style=filled,
		typ=BlockingSubstitution];
	"570:CA" -> "570:BS"	 [cond="[]",
		lineno=None];
	"controller_i.704:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3861d50>",
		fillcolor=springgreen,
		label="controller_i.704:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.704:IF" -> "controller_i.704:BL"	 [cond="['instr_fetch_err']",
		label=instr_fetch_err,
		lineno=704];
	"controller_i.708:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e703d0>",
		fillcolor=springgreen,
		label="controller_i.708:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.704:IF" -> "controller_i.708:IF"	 [cond="['instr_fetch_err']",
		label="!(instr_fetch_err)",
		lineno=704];
	"controller_i.547:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839210>",
		fillcolor=cadetblue,
		label="controller_i.547:BS
mfip_id = 4'd0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839210>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.547:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.628:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846310>",
		fillcolor=cadetblue,
		label="controller_i.628:BS
halt_if = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846310>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.628:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.599:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c86150>",
		fillcolor=turquoise,
		label="decoder_i.599:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_I;
regfile_we = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81c10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81dd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81f50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c860d0>]",
		style=filled,
		typ=Block];
	"decoder_i.604:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c8b2d0>",
		fillcolor=linen,
		label="decoder_i.604:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.599:BL" -> "decoder_i.604:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.614:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8b690>",
		fillcolor=cadetblue,
		label="decoder_i.614:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8b690>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.614:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.597:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3858610>",
		fillcolor=springgreen,
		label="controller_i.597:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.597:IF" -> "controller_i.598:BS"	 [cond="['irq_nm_i', 'irq_pending_i', 'debug_req_i', 'debug_mode_q', 'debug_single_step_i']",
		label="(irq_nm_i || irq_pending_i || debug_req_i || debug_mode_q || debug_single_step_i)",
		lineno=597];
	"controller_i.600:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38587d0>",
		fillcolor=cadetblue,
		label="controller_i.600:BS
ctrl_busy_o = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38587d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.597:IF" -> "controller_i.600:BS"	 [cond="['irq_nm_i', 'irq_pending_i', 'debug_req_i', 'debug_mode_q', 'debug_single_step_i']",
		label="!((irq_nm_i || irq_pending_i || debug_req_i || debug_mode_q || debug_single_step_i))",
		lineno=597];
	"575:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3dfac10>",
		fillcolor=linen,
		label="575:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"574:BL" -> "575:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.626:CA" -> "decoder_i.626:BL"	 [cond="[]",
		lineno=None];
	"592:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e23fd0>",
		fillcolor=cadetblue,
		label="592:BS
regfile_wdata = csr_rdata_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e23fd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"592:BS" -> "Leaf_588:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.751:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c4d050>",
		fillcolor=lightcyan,
		label="decoder_i.751:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.751:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d150>",
		fillcolor=cadetblue,
		label="decoder_i.751:BS
csr_op = CSR_OP_SET;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d150>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.751:CA" -> "decoder_i.751:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.604:CS" -> "decoder_i.611:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.604:CS" -> "decoder_i.616:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.606:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c86610>",
		fillcolor=lightcyan,
		label="decoder_i.606:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.606:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.607:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c86810>",
		fillcolor=lightcyan,
		label="decoder_i.607:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.607:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.609:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c86c90>",
		fillcolor=lightcyan,
		label="decoder_i.609:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.609:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.605:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c86390>",
		fillcolor=lightcyan,
		label="decoder_i.605:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.605:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.608:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c86a50>",
		fillcolor=lightcyan,
		label="decoder_i.608:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.608:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.610:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c86ed0>",
		fillcolor=lightcyan,
		label="decoder_i.610:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.610:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.623:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c8ba90>",
		fillcolor=lightcyan,
		label="decoder_i.623:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.604:CS" -> "decoder_i.623:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=604];
	"decoder_i.733:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.438:AL" -> "decoder_i.438:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.576:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c7c390>",
		fillcolor=turquoise,
		label="decoder_i.576:BL
data_type_o = 2'b00;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c310>]",
		style=filled,
		typ=Block];
	"decoder_i.576:CA" -> "decoder_i.576:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.658:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9ff90>",
		fillcolor=lightcyan,
		label="decoder_i.658:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.658:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3ca5690>",
		fillcolor=turquoise,
		label="decoder_i.658:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_MULH;
mult_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b01;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5190>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5350>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5590>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca56d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3ca5950>]",
		style=filled,
		typ=Block];
	"decoder_i.658:CA" -> "decoder_i.658:BL"	 [cond="[]",
		lineno=None];
	"731:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363c910>",
		def_var="['alu_operand_a_ex_o']",
		fillcolor=deepskyblue,
		label="731:AS
alu_operand_a_ex_o = alu_operand_a;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['alu_operand_a']"];
	"579:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"controller_i.765:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3a645d0>",
		fillcolor=springgreen,
		label="controller_i.765:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.765:IF" -> "controller_i.774:BL"	 [cond="['rst_ni']",
		label="!((!rst_ni))",
		lineno=765];
	"controller_i.765:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3a64390>",
		fillcolor=turquoise,
		label="controller_i.765:BL
ctrl_fsm_cs <= RESET;
nmi_mode_q <= 1'b0;
debug_mode_q <= 1'b0;
load_err_q <= 1'b0;
store_err_q <= 1'b0;
exc_\
req_q <= 1'b0;
illegal_insn_q <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a62d10>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7feaf3a62e50>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a62fd0>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7feaf3a64150>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a64290>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7feaf3a643d0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3a64550>]",
		style=filled,
		typ=Block];
	"controller_i.765:IF" -> "controller_i.765:BL"	 [cond="['rst_ni']",
		label="(!rst_ni)",
		lineno=765];
	"controller_i.580:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"registers_i.57:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3db4ad0>",
		def_var="['rf_reg']",
		fillcolor=deepskyblue,
		label="registers_i.57:AS
rf_reg[((DataWidth-1>=0)?0:DataWidth-1)+((NUM_WORDS-1>=0)?0:NUM_WORDS-1)*((DataWidth-1>=0)?DataWidth:2-DataWidth):((\
DataWidth-1>=0)?0:DataWidth-1)+((NUM_WORDS-1>=0)?0:NUM_WORDS-1)*((DataWidth-1>=0)?DataWidth:2-DataWidth)+((DataWidth-1>=0)?DataWidth:\
2-DataWidth)] = 1'sb0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"registers_i.60:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3dbead0>",
		def_var="['rdata_b_o']",
		fillcolor=deepskyblue,
		label="registers_i.60:AS
rdata_b_o = rf_reg[((DataWidth-1>=0)?0:DataWidth-1)+((NUM_WORDS-1>=0)?raddr_b_i:0-(raddr_b_i-(NUM_WORDS-1)))*((\
DataWidth-1>=0)?DataWidth:2-DataWidth):((DataWidth-1>=0)?0:DataWidth-1)+((NUM_WORDS-1>=0)?raddr_b_i:0-(raddr_b_i-(NUM_WORDS-1)))*((\
DataWidth-1>=0)?DataWidth:2-DataWidth)+((DataWidth-1>=0)?DataWidth:2-DataWidth)];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['rf_reg', 'NUM_WORDS', 'raddr_b_i', 'raddr_b_i', 'NUM_WORDS', 'NUM_WORDS', 'raddr_b_i', 'raddr_b_i', 'NUM_WORDS', 'DataWidth', '\
DataWidth', 'DataWidth', 'DataWidth', 'DataWidth', 'DataWidth']"];
	"registers_i.57:AS" -> "registers_i.60:AS";
	"registers_i.59:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3dbb510>",
		def_var="['rdata_a_o']",
		fillcolor=deepskyblue,
		label="registers_i.59:AS
rdata_a_o = rf_reg[((DataWidth-1>=0)?0:DataWidth-1)+((NUM_WORDS-1>=0)?raddr_a_i:0-(raddr_a_i-(NUM_WORDS-1)))*((\
DataWidth-1>=0)?DataWidth:2-DataWidth):((DataWidth-1>=0)?0:DataWidth-1)+((NUM_WORDS-1>=0)?raddr_a_i:0-(raddr_a_i-(NUM_WORDS-1)))*((\
DataWidth-1>=0)?DataWidth:2-DataWidth)+((DataWidth-1>=0)?DataWidth:2-DataWidth)];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['rf_reg', 'NUM_WORDS', 'raddr_a_i', 'raddr_a_i', 'NUM_WORDS', 'NUM_WORDS', 'raddr_a_i', 'raddr_a_i', 'NUM_WORDS', 'DataWidth', '\
DataWidth', 'DataWidth', 'DataWidth', 'DataWidth', 'DataWidth']"];
	"registers_i.57:AS" -> "registers_i.59:AS";
	"controller_i.729:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e6f9d0>",
		fillcolor=turquoise,
		label="controller_i.729:BL
exc_cause_o = EXC_CAUSE_LOAD_ACCESS_FAULT;
csr_mtval_o = lsu_addr_last_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6fa10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6fb90>]",
		style=filled,
		typ=Block];
	"controller_i.729:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.483:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3974d90>",
		fillcolor=turquoise,
		label="decoder_i.483:BL
jump_in_dec_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3974d10>]",
		style=filled,
		typ=Block];
	"decoder_i.483:CA" -> "decoder_i.483:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.638:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.615:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf38563d0>",
		fillcolor=turquoise,
		label="controller_i.615:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"controller_i.616:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf38564d0>",
		fillcolor=springgreen,
		label="controller_i.616:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.615:BL" -> "controller_i.616:IF"	 [cond="[]",
		lineno=None];
	"controller_i.630:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf38462d0>",
		fillcolor=springgreen,
		label="controller_i.630:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.615:BL" -> "controller_i.630:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.704:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c3e290>",
		fillcolor=linen,
		label="decoder_i.704:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.703:CA" -> "decoder_i.704:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.421:AS" -> "574:AL";
	"controller_i.532:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3f75dd0>",
		fillcolor=springgreen,
		label="controller_i.532:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.532:IF" -> "controller_i.533:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[6]",
		lineno=532];
	"controller_i.534:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3838110>",
		fillcolor=springgreen,
		label="controller_i.534:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.532:IF" -> "controller_i.534:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[6])",
		lineno=532];
	"decoder_i.501:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39a4190>",
		fillcolor=turquoise,
		label="decoder_i.501:BL
jump_in_dec_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4150>]",
		style=filled,
		typ=Block];
	"decoder_i.501:BL" -> "decoder_i.518:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.503:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf39a4c10>",
		fillcolor=springgreen,
		label="decoder_i.503:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.501:BL" -> "decoder_i.503:IF"	 [cond="[]",
		lineno=None];
	"controller_i.715:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e6f350>",
		fillcolor=springgreen,
		label="controller_i.715:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.715:IF" -> "controller_i.723:BS"	 [cond="['debug_mode_q', 'ebreak_into_debug']",
		label="!((debug_mode_q | ebreak_into_debug))",
		lineno=715];
	"controller_i.715:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e6f150>",
		fillcolor=turquoise,
		label="controller_i.715:BL
pc_set_o = 1'b0;
csr_save_id_o = 1'b0;
csr_save_cause_o = 1'b0;
ctrl_fsm_ns = DBG_TAKEN_ID;
flush_id = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70cd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70e50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70fd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6f190>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e6f2d0>]",
		style=filled,
		typ=Block];
	"controller_i.715:IF" -> "controller_i.715:BL"	 [cond="['debug_mode_q', 'ebreak_into_debug']",
		label="(debug_mode_q | ebreak_into_debug)",
		lineno=715];
	"576:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e16cd0>",
		fillcolor=lightcyan,
		label="576:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"576:CA" -> "576:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.750:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48ed0>",
		fillcolor=cadetblue,
		label="decoder_i.750:BS
csr_op = CSR_OP_WRITE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48ed0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.750:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.694:BL" -> "controller_i.698:IF"	 [cond="[]",
		lineno=None];
	"controller_i.751:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3861e10>",
		fillcolor=springgreen,
		label="controller_i.751:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.694:BL" -> "controller_i.751:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.732:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c43610>",
		fillcolor=lightcyan,
		label="decoder_i.732:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.732:CA" -> "decoder_i.732:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.642:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a6d0>",
		fillcolor=cadetblue,
		label="decoder_i.642:BS
alu_operator_o = ALU_SRL;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a6d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.642:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.560:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.440:IF" -> "decoder_i.441:BS"	 [cond="['csr_op', 'CSR_OP_SET', 'csr_op', 'CSR_OP_CLEAR', 'instr']",
		label="(((csr_op == CSR_OP_SET) || (csr_op == CSR_OP_CLEAR)) && (instr[19:15] == 1'sb0))",
		lineno=440];
	"controller_i.572:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3861d10>",
		fillcolor=linen,
		label="controller_i.572:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"controller_i.572:CS" -> "controller_i.694:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.572:CS" -> "controller_i.663:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.572:CS" -> "controller_i.580:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.572:CS" -> "controller_i.680:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.572:CS" -> "controller_i.593:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.754:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3eac910>",
		fillcolor=lightcyan,
		label="controller_i.754:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.572:CS" -> "controller_i.754:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.586:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf384c510>",
		fillcolor=lightcyan,
		label="controller_i.586:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.572:CS" -> "controller_i.586:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.641:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3846150>",
		fillcolor=lightcyan,
		label="controller_i.641:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.572:CS" -> "controller_i.641:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.615:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3856390>",
		fillcolor=lightcyan,
		label="controller_i.615:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.572:CS" -> "controller_i.615:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.573:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf384f890>",
		fillcolor=lightcyan,
		label="controller_i.573:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.572:CS" -> "controller_i.573:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"controller_i.602:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3858110>",
		fillcolor=lightcyan,
		label="controller_i.602:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"controller_i.572:CS" -> "controller_i.602:CA"	 [cond="['ctrl_fsm_cs']",
		label=ctrl_fsm_cs,
		lineno=572];
	"decoder_i.519:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.538:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3838710>",
		fillcolor=springgreen,
		label="controller_i.538:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.539:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838750>",
		fillcolor=cadetblue,
		label="controller_i.539:BS
mfip_id = 4'd4;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838750>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.538:IF" -> "controller_i.539:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[4]",
		lineno=538];
	"controller_i.540:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3838a10>",
		fillcolor=springgreen,
		label="controller_i.540:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.538:IF" -> "controller_i.540:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[4])",
		lineno=538];
	"controller_i.653:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.485:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3978810>",
		fillcolor=springgreen,
		label="decoder_i.485:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.485:IF" -> "decoder_i.485:BL"	 [cond="['instr_new_i']",
		label=instr_new_i,
		lineno=485];
	"decoder_i.493:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3978e10>",
		fillcolor=turquoise,
		label="decoder_i.493:BL
alu_op_a_mux_sel_o = OP_A_CURRPC;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_INCR_PC;
alu_operator_\
o = ALU_ADD;
regfile_we = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978990>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978b10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978cd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978e50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3978f90>]",
		style=filled,
		typ=Block];
	"decoder_i.485:IF" -> "decoder_i.493:BL"	 [cond="['instr_new_i']",
		label="!(instr_new_i)",
		lineno=485];
	"812:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3663190>",
		def_var="['instr_ret_compressed_o']",
		fillcolor=deepskyblue,
		label="812:AS
instr_ret_compressed_o = instr_ret_o & instr_is_compressed_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_ret_o', 'instr_is_compressed_i']"];
	"567:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3df4f10>",
		fillcolor=lightcyan,
		label="567:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"567:CA" -> "567:BS"	 [cond="[]",
		lineno=None];
	"registers_i.60:AS" -> "611:AS";
	"registers_i.60:AS" -> "586:AS";
	"738:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf366e4d0>",
		def_var="['multdiv_operand_b_ex_o']",
		fillcolor=deepskyblue,
		label="738:AS
multdiv_operand_b_ex_o = regfile_rdata_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_rdata_b']"];
	"registers_i.60:AS" -> "738:AS";
	"729:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363c590>",
		def_var="['data_wdata_ex_o']",
		fillcolor=deepskyblue,
		label="729:AS
data_wdata_ex_o = regfile_rdata_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_rdata_b']"];
	"registers_i.60:AS" -> "729:AS";
	"decoder_i.606:CA" -> "decoder_i.606:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.746:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.445:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3997210>",
		fillcolor=springgreen,
		label="decoder_i.445:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.449:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3997410>",
		fillcolor=springgreen,
		label="decoder_i.449:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.445:IF" -> "decoder_i.449:IF"	 [cond="['csr_access_o', 'csr_op_o', 'CSR_OP_WRITE', 'csr_op_o', 'CSR_OP_SET']",
		label="!(((csr_access_o == 1'b1) && ((csr_op_o == CSR_OP_WRITE) || (csr_op_o == CSR_OP_SET))))",
		lineno=445];
	"decoder_i.445:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39aa810>",
		fillcolor=turquoise,
		label="decoder_i.445:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"decoder_i.445:IF" -> "decoder_i.445:BL"	 [cond="['csr_access_o', 'csr_op_o', 'CSR_OP_WRITE', 'csr_op_o', 'CSR_OP_SET']",
		label="((csr_access_o == 1'b1) && ((csr_op_o == CSR_OP_WRITE) || (csr_op_o == CSR_OP_SET)))",
		lineno=445];
	"decoder_i.493:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.423:AS" -> "574:AL";
	"controller_i.536:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3838410>",
		fillcolor=springgreen,
		label="controller_i.536:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.536:IF" -> "controller_i.538:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[5])",
		lineno=536];
	"controller_i.537:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838450>",
		fillcolor=cadetblue,
		label="controller_i.537:BS
mfip_id = 4'd5;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838450>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.536:IF" -> "controller_i.537:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[5]",
		lineno=536];
	"decoder_i.584:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.648:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.627:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3846250>",
		fillcolor=springgreen,
		label="controller_i.627:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.627:IF" -> "controller_i.628:BS"	 [cond="['enter_debug_mode', 'handle_irq', 'stall']",
		label="((enter_debug_mode || handle_irq) && stall)",
		lineno=627];
	"controller_i.631:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3846910>",
		fillcolor=springgreen,
		label="controller_i.631:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.631:IF" -> "controller_i.631:BL"	 [cond="['enter_debug_mode']",
		label=enter_debug_mode,
		lineno=631];
	"controller_i.631:IF" -> "controller_i.635:IF"	 [cond="['enter_debug_mode']",
		label="!(enter_debug_mode)",
		lineno=631];
	"decoder_i.622:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91050>",
		fillcolor=cadetblue,
		label="decoder_i.622:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c91050>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.622:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.451:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0210>",
		fillcolor=cadetblue,
		label="decoder_i.451:BS
csr_pipe_flush_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a0210>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.Leaf_443:AL"	 [def_var="['csr_pipe_flush_o']",
		label="decoder_i.Leaf_443:AL"];
	"decoder_i.451:BS" -> "decoder_i.Leaf_443:AL"	 [cond="[]",
		lineno=None];
	"controller_i.748:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac8d0>",
		fillcolor=cadetblue,
		label="controller_i.748:BS
ctrl_fsm_ns = WAIT_SLEEP;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac8d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.748:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.708:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3861fd0>",
		fillcolor=turquoise,
		label="controller_i.708:BL
exc_cause_o = EXC_CAUSE_ILLEGAL_INSN;
csr_mtval_o = (instr_is_compressed_i)? { 16'b0, instr_compressed_i } : \
instr_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70050>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e70310>]",
		style=filled,
		typ=Block];
	"controller_i.708:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.765:BL" -> "controller_i.Leaf_764:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.704:CS" -> "decoder_i.711:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=704];
	"decoder_i.704:CS" -> "decoder_i.705:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=704];
	"decoder_i.704:CS" -> "decoder_i.721:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=704];
	"controller_i.504:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8cd10>",
		def_var="['csr_pipe_flush']",
		fillcolor=deepskyblue,
		label="controller_i.504:AS
csr_pipe_flush = csr_pipe_flush_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['csr_pipe_flush_i', 'instr_valid_i']"];
	"decoder_i.Leaf_443:AL" -> "controller_i.504:AS";
	"controller_i.760:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3eacf50>",
		def_var="['debug_mode_o']",
		fillcolor=deepskyblue,
		label="controller_i.760:AS
debug_mode_o = debug_mode_q;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['debug_mode_q']"];
	"decoder_i.643:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9a890>",
		fillcolor=lightcyan,
		label="decoder_i.643:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.643:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a990>",
		fillcolor=cadetblue,
		label="decoder_i.643:BS
alu_operator_o = ALU_SRA;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a990>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.643:CA" -> "decoder_i.643:BS"	 [cond="[]",
		lineno=None];
	"controller_i.754:CA" -> "controller_i.754:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.544:BL" -> "decoder_i.550:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.556:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c72b50>",
		fillcolor=linen,
		label="decoder_i.556:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.544:BL" -> "decoder_i.556:CS"	 [cond="[]",
		lineno=None];
	"controller_i.534:IF" -> "controller_i.536:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[5])",
		lineno=534];
	"controller_i.535:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838150>",
		fillcolor=cadetblue,
		label="controller_i.535:BS
mfip_id = 4'd5;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838150>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.534:IF" -> "controller_i.535:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[5]",
		lineno=534];
	"803:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3667d50>",
		fillcolor=turquoise,
		label="803:BL
stall_lsu = data_req_dec;
stall_multdiv = multdiv_en_dec;
stall_branch = branch_in_dec;
stall_jump = jump_in_dec;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667a10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667bd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667d90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667ed0>]",
		style=filled,
		typ=Block];
	"803:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"581:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3dfa750>",
		fillcolor=lightcyan,
		label="581:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"581:CA" -> "581:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.665:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.586:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf384cad0>",
		fillcolor=turquoise,
		label="controller_i.586:BL
ctrl_busy_o = 1'b0;
instr_req_o = 1'b0;
halt_if = 1'b1;
flush_id = 1'b1;
ctrl_fsm_ns = SLEEP;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c750>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c890>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384c9d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384cb10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384cc50>]",
		style=filled,
		typ=Block];
	"controller_i.586:CA" -> "controller_i.586:BL"	 [cond="[]",
		lineno=None];
	"controller_i.642:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf386e5d0>",
		fillcolor=turquoise,
		label="controller_i.642:BL
pc_mux_o = PC_EXC;
pc_set_o = 1'b1;
exc_pc_mux_o = EXC_PC_IRQ;
csr_save_if_o = 1'b1;
csr_save_cause_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3846f50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386e0d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386e250>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386e3d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf386e550>]",
		style=filled,
		typ=Block];
	"controller_i.642:BL" -> "controller_i.648:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.607:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86910>",
		fillcolor=cadetblue,
		label="decoder_i.607:BS
alu_operator_o = ALU_SLTU;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86910>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.607:CA" -> "decoder_i.607:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.530:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3993910>",
		fillcolor=lightcyan,
		label="decoder_i.530:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.530:CA" -> "decoder_i.530:BS"	 [cond="[]",
		lineno=None];
	"controller_i.762:AS" -> "controller_i.550:AL";
	"decoder_i.641:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"582:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3dfaa90>",
		fillcolor=lightcyan,
		label="582:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"582:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfab90>",
		fillcolor=cadetblue,
		label="582:BS
imm_b = 32'h4;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfab90>]",
		style=filled,
		typ=BlockingSubstitution];
	"582:CA" -> "582:BS"	 [cond="[]",
		lineno=None];
	"786:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"controller_i.656:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf385c3d0>",
		fillcolor=springgreen,
		label="controller_i.656:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.656:IF" -> "controller_i.657:BS"	 [cond="['csr_msip_i']",
		label=csr_msip_i,
		lineno=656];
	"controller_i.656:IF" -> "controller_i.659:BS"	 [cond="['csr_msip_i']",
		label="!(csr_msip_i)",
		lineno=656];
	"decoder_i.639:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95e50>",
		fillcolor=cadetblue,
		label="decoder_i.639:BS
alu_operator_o = ALU_OR;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95e50>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.639:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.497:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f92ed0>",
		def_var="['load_err_d']",
		fillcolor=deepskyblue,
		label="controller_i.497:AS
load_err_d = load_err_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['load_err_i']"];
	"controller_i.497:AS" -> "controller_i.764:AL";
	"decoder_i.450:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf39a0150>",
		fillcolor=springgreen,
		label="decoder_i.450:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.449:IF" -> "decoder_i.450:IF"	 [cond="['csr_access_o', 'csr_op_o', 'CSR_OP_READ']",
		label="((csr_access_o == 1'b1) && (csr_op_o != CSR_OP_READ))",
		lineno=449];
	"registers_i.48:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf363f690>",
		clk_sens=True,
		fillcolor=gold,
		label="registers_i.48:AL",
		sens="['clk_i', 'rst_ni']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['rst_ni', 'NUM_WORDS']"];
	"registers_i.49:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf363f810>",
		fillcolor=springgreen,
		label="registers_i.49:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"registers_i.48:AL" -> "registers_i.49:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.607:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"563:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3df4890>",
		def_var="['imm_b_mux_sel']",
		fillcolor=deepskyblue,
		label="563:AS
imm_b_mux_sel = (lsu_addr_incr_req_i)? IMM_B_INCR_ADDR : imm_b_mux_sel_dec;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['lsu_addr_incr_req_i', 'IMM_B_INCR_ADDR', 'imm_b_mux_sel_dec']"];
	"563:AS" -> "574:AL";
	"controller_i.525:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75210>",
		fillcolor=cadetblue,
		label="controller_i.525:BS
mfip_id = 4'd10;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75210>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.525:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.602:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3858f90>",
		fillcolor=turquoise,
		label="controller_i.602:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"controller_i.602:BL" -> "controller_i.605:IF"	 [cond="[]",
		lineno=None];
	"controller_i.603:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3858910>",
		fillcolor=springgreen,
		label="controller_i.603:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.602:BL" -> "controller_i.603:IF"	 [cond="[]",
		lineno=None];
	"controller_i.610:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3856050>",
		fillcolor=springgreen,
		label="controller_i.610:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.602:BL" -> "controller_i.610:IF"	 [cond="[]",
		lineno=None];
	"controller_i.550:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf384f790>",
		fillcolor=turquoise,
		label="controller_i.550:BL
instr_req_o = 1'b1;
csr_save_if_o = 1'b0;
csr_save_id_o = 1'b0;
csr_restore_mret_id_o = 1'b0;
csr_restore_dret_\
id_o = 1'b0;
csr_save_cause_o = 1'b0;
csr_mtval_o = 1'sb0;
pc_mux_o = PC_BOOT;
pc_set_o = 1'b0;
exc_pc_mux_o = EXC_PC_IRQ;
exc_cause_\
o = EXC_CAUSE_INSN_ADDR_MISA;
ctrl_fsm_ns = ctrl_fsm_cs;
ctrl_busy_o = 1'b1;
halt_if = 1'b0;
flush_id = 1'b0;
debug_csr_save_o = \
1'b0;
debug_cause_o = DBG_CAUSE_EBREAK;
debug_mode_d = debug_mode_q;
nmi_mode_d = nmi_mode_q;
perf_tbranch_o = 1'b0;
perf_jump_o = \
1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75050>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75850>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3f75e50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838490>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838a90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839110>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839350>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839490>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38395d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839750>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf38398d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839a10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839b50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839c90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839dd0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839f50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384f150>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384f310>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384f450>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384f5d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384f710>]",
		style=filled,
		typ=Block];
	"controller_i.550:AL" -> "controller_i.550:BL"	 [cond="[]",
		lineno=None];
	"controller_i.616:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3856510>",
		fillcolor=turquoise,
		label="controller_i.616:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"controller_i.616:IF" -> "controller_i.616:BL"	 [cond="['instr_valid_i']",
		label=instr_valid_i,
		lineno=616];
	"565:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3df4dd0>",
		fillcolor=turquoise,
		label="565:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"566:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3e16810>",
		fillcolor=linen,
		label="566:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"565:BL" -> "566:CS"	 [cond="[]",
		lineno=None];
	"659:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e07d50>",
		def_var="['illegal_insn_o']",
		fillcolor=deepskyblue,
		label="659:AS
illegal_insn_o = instr_valid_i & (illegal_insn_dec | illegal_csr_insn_i);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_valid_i', 'illegal_insn_dec', 'illegal_csr_insn_i']"];
	"decoder_i.773:AS" -> "659:AS";
	"decoder_i.609:CA" -> "decoder_i.609:BS"	 [cond="[]",
		lineno=None];
	"controller_i.504:AS" -> "controller_i.550:AL";
	"controller_i.504:AS" -> "controller_i.511:AS";
	"registers_i.59:AS" -> "565:AL";
	"609:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e22d50>",
		def_var="['rfvi_reg_rdata_ra_o']",
		fillcolor=deepskyblue,
		label="609:AS
rfvi_reg_rdata_ra_o = regfile_rdata_a;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_rdata_a']"];
	"registers_i.59:AS" -> "609:AS";
	"737:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf366e310>",
		def_var="['multdiv_operand_a_ex_o']",
		fillcolor=deepskyblue,
		label="737:AS
multdiv_operand_a_ex_o = regfile_rdata_a;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_rdata_a']"];
	"registers_i.59:AS" -> "737:AS";
	"controller_i.520:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3facb90>",
		fillcolor=springgreen,
		label="controller_i.520:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.520:IF" -> "controller_i.521:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[12]",
		lineno=520];
	"controller_i.522:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3face90>",
		fillcolor=springgreen,
		label="controller_i.522:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.520:IF" -> "controller_i.522:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[12])",
		lineno=520];
	"decoder_i.532:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3993e10>",
		fillcolor=springgreen,
		label="decoder_i.532:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.536:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3989410>",
		fillcolor=turquoise,
		label="decoder_i.536:BL
alu_op_a_mux_sel_o = OP_A_CURRPC;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_B;
alu_operator_o = ALU_\
ADD;
regfile_we = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993f90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989150>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39892d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989450>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3989590>]",
		style=filled,
		typ=Block];
	"decoder_i.532:IF" -> "decoder_i.536:BL"	 [cond="['instr_new_i']",
		label="!(instr_new_i)",
		lineno=532];
	"decoder_i.532:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3993bd0>",
		fillcolor=turquoise,
		label="decoder_i.532:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_REG_B;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993c10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3993d90>]",
		style=filled,
		typ=Block];
	"decoder_i.532:IF" -> "decoder_i.532:BL"	 [cond="['instr_new_i']",
		label=instr_new_i,
		lineno=532];
	"decoder_i.527:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3993290>",
		fillcolor=lightcyan,
		label="decoder_i.527:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.527:CA" -> "decoder_i.527:BS"	 [cond="[]",
		lineno=None];
	"725:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e25e90>",
		def_var="['data_req_ex_o']",
		fillcolor=deepskyblue,
		label="725:AS
data_req_ex_o = data_req_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['data_req_id']"];
	"733:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363cc50>",
		def_var="['mult_en_ex_o']",
		fillcolor=deepskyblue,
		label="733:AS
mult_en_ex_o = mult_en_id;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['mult_en_id']"];
	"decoder_i.559:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c729d0>",
		fillcolor=lightcyan,
		label="decoder_i.559:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.559:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72ad0>",
		fillcolor=cadetblue,
		label="decoder_i.559:BS
data_type_o = 2'b00;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c72ad0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.559:CA" -> "decoder_i.559:BS"	 [cond="[]",
		lineno=None];
	"768:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3661c10>",
		fillcolor=lightcyan,
		label="768:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"768:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3661f50>",
		fillcolor=turquoise,
		label="768:BL
id_wb_fsm_ns = WAIT_MULTICYCLE;
stall_lsu = 1'b1;
instr_multicycle_done_n = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661e10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661f90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634150>]",
		style=filled,
		typ=Block];
	"768:CA" -> "768:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.724:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c43e50>",
		fillcolor=springgreen,
		label="decoder_i.724:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.723:CA" -> "decoder_i.724:IF"	 [cond="[]",
		lineno=None];
	"730:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363c750>",
		def_var="['alu_operator_ex_o']",
		fillcolor=deepskyblue,
		label="730:AS
alu_operator_ex_o = alu_operator;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['alu_operator']"];
	"568:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e16210>",
		fillcolor=lightcyan,
		label="568:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"568:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16350>",
		fillcolor=cadetblue,
		label="568:BS
alu_operand_a = lsu_addr_last_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16350>]",
		style=filled,
		typ=BlockingSubstitution];
	"568:CA" -> "568:BS"	 [cond="[]",
		lineno=None];
	"736:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf366e150>",
		def_var="['multdiv_signed_mode_ex_o']",
		fillcolor=deepskyblue,
		label="736:AS
multdiv_signed_mode_ex_o = multdiv_signed_mode;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['multdiv_signed_mode']"];
	"578:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa210>",
		fillcolor=cadetblue,
		label="578:BS
imm_b = imm_b_type;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa210>]",
		style=filled,
		typ=BlockingSubstitution];
	"578:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"controller_i.539:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.641:CA" -> "controller_i.641:BL"	 [cond="[]",
		lineno=None];
	"controller_i.506:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fa8250>",
		def_var="['illegal_dret']",
		fillcolor=deepskyblue,
		label="controller_i.506:AS
illegal_dret = dret_insn & ~debug_mode_q;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['dret_insn', 'debug_mode_q']"];
	"controller_i.508:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fa8b10>",
		def_var="['illegal_insn_d']",
		fillcolor=deepskyblue,
		label="controller_i.508:AS
illegal_insn_d = (illegal_insn_i | illegal_dret | illegal_umode) & (ctrl_fsm_cs != FLUSH);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['illegal_insn_i', 'illegal_dret', 'illegal_umode', 'ctrl_fsm_cs', 'FLUSH']"];
	"controller_i.506:AS" -> "controller_i.508:AS";
	"decoder_i.526:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.637:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c958d0>",
		fillcolor=cadetblue,
		label="decoder_i.637:BS
alu_operator_o = ALU_SLTU;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c958d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.637:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"571:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e16890>",
		fillcolor=lightcyan,
		label="571:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"571:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16990>",
		fillcolor=cadetblue,
		label="571:BS
alu_operand_a = 1'bX;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16990>]",
		style=filled,
		typ=BlockingSubstitution];
	"571:CA" -> "571:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.555:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.644:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9aad0>",
		fillcolor=lightcyan,
		label="decoder_i.644:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.644:CA" -> "decoder_i.644:BL"	 [cond="[]",
		lineno=None];
	"controller_i.523:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3faced0>",
		fillcolor=cadetblue,
		label="controller_i.523:BS
mfip_id = 4'd11;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3faced0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.522:IF" -> "controller_i.523:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[11]",
		lineno=522];
	"controller_i.524:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3f751d0>",
		fillcolor=springgreen,
		label="controller_i.524:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.522:IF" -> "controller_i.524:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[11])",
		lineno=522];
	"742:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf366ef10>",
		fillcolor=turquoise,
		label="742:BL
id_wb_fsm_cs <= IDLE;
branch_set_q <= 1'b0;
instr_multicycle_done_q <= 1'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf366edd0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7feaf366ef50>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf3649110>]",
		style=filled,
		typ=Block];
	"742:BL" -> "Leaf_741:AL"	 [cond="[]",
		lineno=None];
	"controller_i.764:BL" -> "controller_i.765:IF"	 [cond="[]",
		lineno=None];
	"722:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e258d0>",
		def_var="['data_req_id']",
		fillcolor=deepskyblue,
		label="722:AS
data_req_id = (instr_executing)? data_req_dec : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_executing', 'data_req_dec']"];
	"722:AS" -> "725:AS";
	"controller_i.498:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8c050>",
		def_var="['store_err_d']",
		fillcolor=deepskyblue,
		label="controller_i.498:AS
store_err_d = store_err_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['store_err_i']"];
	"controller_i.498:AS" -> "controller_i.764:AL";
	"decoder_i.524:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.635:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c95290>",
		fillcolor=lightcyan,
		label="decoder_i.635:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.635:CA" -> "decoder_i.635:BS"	 [cond="[]",
		lineno=None];
	"controller_i.510:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fa8fd0>",
		def_var="['exc_req_lsu']",
		fillcolor=deepskyblue,
		label="controller_i.510:AS
exc_req_lsu = store_err_i | load_err_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['store_err_i', 'load_err_i']"];
	"controller_i.510:AS" -> "controller_i.511:AS";
	"613:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e14490>",
		def_var="['rfvi_reg_wdata_rd_o']",
		fillcolor=deepskyblue,
		label="613:AS
rfvi_reg_wdata_rd_o = regfile_wdata;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['regfile_wdata']"];
	"registers_i.49:IF" -> "registers_i.51:BL"	 [cond="['rst_ni']",
		label="!((!rst_ni))",
		lineno=49];
	"registers_i.50:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf363f8d0>",
		fillcolor=firebrick,
		label="registers_i.50:NS
rf_reg_tmp <= { (NUM_WORDS - 1 >= 1)? NUM_WORDS - 1 : 3 - NUM_WORDS{ 1'sb0 } };",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7feaf363f8d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"registers_i.49:IF" -> "registers_i.50:NS"	 [cond="['rst_ni']",
		label="(!rst_ni)",
		lineno=49];
	"controller_i.610:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf38561d0>",
		fillcolor=turquoise,
		label="controller_i.610:BL
ctrl_fsm_ns = DBG_TAKEN_IF;
halt_if = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3856210>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3856350>]",
		style=filled,
		typ=Block];
	"controller_i.610:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.751:IF" -> "controller_i.752:BS"	 [cond="['enter_debug_mode']",
		label=enter_debug_mode,
		lineno=751];
	"decoder_i.536:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"569:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16550>",
		fillcolor=cadetblue,
		label="569:BS
alu_operand_a = pc_id_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3e16550>]",
		style=filled,
		typ=BlockingSubstitution];
	"569:BS" -> "Leaf_565:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.672:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3caa490>",
		fillcolor=lightcyan,
		label="decoder_i.672:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.672:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3caab50>",
		fillcolor=turquoise,
		label="decoder_i.672:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_DIV;
div_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b11;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caa650>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caa810>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caaa50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caab90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3caae10>]",
		style=filled,
		typ=Block];
	"decoder_i.672:CA" -> "decoder_i.672:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.445:BL" -> "decoder_i.446:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.557:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.574:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77e90>",
		fillcolor=cadetblue,
		label="decoder_i.574:BS
data_type_o = 2'b10;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c77e90>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.574:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.615:CA" -> "controller_i.615:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.483:BL" -> "decoder_i.485:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.528:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.714:BL" -> "controller_i.715:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.501:CA" -> "decoder_i.501:BL"	 [cond="[]",
		lineno=None];
	"720:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e25250>",
		def_var="['instr_multicycle']",
		fillcolor=deepskyblue,
		label="720:AS
instr_multicycle = data_req_dec | multdiv_en_dec | branch_in_dec | jump_in_dec;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['data_req_dec', 'multdiv_en_dec', 'branch_in_dec', 'jump_in_dec']"];
	"720:AS" -> "721:AS";
	"decoder_i.422:AS" -> "574:AL";
	"decoder_i.581:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c7d0>",
		fillcolor=cadetblue,
		label="decoder_i.581:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c7d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.581:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.592:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c81810>",
		fillcolor=turquoise,
		label="decoder_i.592:BL
alu_op_a_mux_sel_o = OP_A_CURRPC;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_U;
alu_operator_o = ALU_\
ADD;
regfile_we = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81390>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81550>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c816d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81850>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c81990>]",
		style=filled,
		typ=Block];
	"decoder_i.592:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"809:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3667f50>",
		fillcolor=lightcyan,
		label="809:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"809:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3663050>",
		fillcolor=cadetblue,
		label="809:BS
id_wb_fsm_ns = 1'bX;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3663050>]",
		style=filled,
		typ=BlockingSubstitution];
	"809:CA" -> "809:BS"	 [cond="[]",
		lineno=None];
	"588:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7feaf3e23610>",
		clk_sens=False,
		fillcolor=gold,
		label="588:AL",
		sens="['regfile_wdata_lsu_i', 'csr_rdata_i', 'regfile_wdata_ex_i']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['regfile_wdata_lsu_i', 'csr_rdata_i', 'regfile_wdata_ex_i', 'regfile_wdata_sel']"];
	"588:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3e23850>",
		fillcolor=turquoise,
		label="588:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"588:AL" -> "588:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.750:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c48d90>",
		fillcolor=lightcyan,
		label="decoder_i.750:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.750:CA" -> "decoder_i.750:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.642:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9a5d0>",
		fillcolor=lightcyan,
		label="decoder_i.642:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.642:CA" -> "decoder_i.642:BS"	 [cond="[]",
		lineno=None];
	"controller_i.573:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf384fd50>",
		fillcolor=turquoise,
		label="controller_i.573:BL
instr_req_o = 1'b0;
pc_mux_o = PC_BOOT;
pc_set_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384fa10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384fb90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf384fcd0>]",
		style=filled,
		typ=Block];
	"controller_i.573:CA" -> "controller_i.573:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.550:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.618:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8ba50>",
		fillcolor=cadetblue,
		label="decoder_i.618:BS
alu_operator_o = ALU_SRL;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c8ba50>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.618:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.761:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3a62390>",
		def_var="['stall']",
		fillcolor=deepskyblue,
		label="controller_i.761:AS
stall = stall_lsu_i | stall_multdiv_i | stall_jump_i | stall_branch_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['stall_lsu_i', 'stall_multdiv_i', 'stall_jump_i', 'stall_branch_i']"];
	"controller_i.761:AS" -> "controller_i.763:AS";
	"controller_i.761:AS" -> "controller_i.762:AS";
	"controller_i.761:AS" -> "controller_i.550:AL";
	"controller_i.544:IF" -> "controller_i.547:BS"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[1])",
		lineno=544];
	"controller_i.545:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839090>",
		fillcolor=cadetblue,
		label="controller_i.545:BS
mfip_id = 4'd1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3839090>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.544:IF" -> "controller_i.545:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[1]",
		lineno=544];
	"controller_i.738:IF" -> "controller_i.739:BS"	 [cond="['nmi_mode_q']",
		label=nmi_mode_q,
		lineno=738];
	"decoder_i.521:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39a7890>",
		fillcolor=turquoise,
		label="decoder_i.521:BL
branch_in_dec_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a78d0>]",
		style=filled,
		typ=Block];
	"decoder_i.521:CA" -> "decoder_i.521:BL"	 [cond="[]",
		lineno=None];
	"controller_i.617:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3856950>",
		fillcolor=springgreen,
		label="controller_i.617:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.617:IF" -> "controller_i.617:BL"	 [cond="['special_req']",
		label=special_req,
		lineno=617];
	"controller_i.621:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3856ad0>",
		fillcolor=springgreen,
		label="controller_i.621:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.617:IF" -> "controller_i.621:IF"	 [cond="['special_req']",
		label="!(special_req)",
		lineno=617];
	"decoder_i.693:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c34a90>",
		fillcolor=turquoise,
		label="decoder_i.693:BL
alu_operator_o = ALU_ADD;
multdiv_operator_o = MD_OP_REM;
div_en_o = (RV32M)? 1'b1 : 1'b0;
multdiv_signed_mode_\
o = 2'b00;
illegal_insn = (RV32M)? 1'b0 : 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34590>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34750>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34990>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34ad0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c34d50>]",
		style=filled,
		typ=Block];
	"decoder_i.693:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.521:BL" -> "decoder_i.532:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.523:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3993890>",
		fillcolor=linen,
		label="decoder_i.523:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.521:BL" -> "decoder_i.523:CS"	 [cond="[]",
		lineno=None];
	"controller_i.593:BL" -> "controller_i.597:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.429:AS" -> "decoder_i.432:AS";
	"decoder_i.429:AS" -> "612:AS";
	"decoder_i.753:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"593:CA" -> "593:BS"	 [cond="[]",
		lineno=None];
	"controller_i.741:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3eac6d0>",
		fillcolor=springgreen,
		label="controller_i.741:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.747:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3eac890>",
		fillcolor=springgreen,
		label="controller_i.747:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.741:IF" -> "controller_i.747:IF"	 [cond="['dret_insn']",
		label="!(dret_insn)",
		lineno=741];
	"controller_i.741:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3eac490>",
		fillcolor=turquoise,
		label="controller_i.741:BL
pc_mux_o = PC_DRET;
pc_set_o = 1'b1;
debug_mode_d = 1'b0;
csr_restore_dret_id_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac210>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac350>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac4d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eac650>]",
		style=filled,
		typ=Block];
	"controller_i.741:IF" -> "controller_i.741:BL"	 [cond="['dret_insn']",
		label=dret_insn,
		lineno=741];
	"decoder_i.757:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d710>",
		fillcolor=cadetblue,
		label="decoder_i.757:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d710>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.757:CA" -> "decoder_i.757:BS"	 [cond="[]",
		lineno=None];
	"controller_i.747:IF" -> "controller_i.748:BS"	 [cond="['wfi_insn']",
		label=wfi_insn,
		lineno=747];
	"controller_i.749:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3eacad0>",
		fillcolor=springgreen,
		label="controller_i.749:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.747:IF" -> "controller_i.749:IF"	 [cond="['wfi_insn']",
		label="!(wfi_insn)",
		lineno=747];
	"decoder_i.525:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a7f10>",
		fillcolor=cadetblue,
		label="decoder_i.525:BS
alu_operator_o = ALU_NE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a7f10>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.525:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"Leaf_565:AL" -> "731:AS";
	"controller_i.549:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fac950>",
		def_var="['unused_csr_mtip']",
		fillcolor=deepskyblue,
		label="controller_i.549:AS
unused_csr_mtip = csr_mtip_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['csr_mtip_i']"];
	"decoder_i.581:CA" -> "decoder_i.581:BS"	 [cond="[]",
		lineno=None];
	"controller_i.530:IF" -> "controller_i.531:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[7]",
		lineno=530];
	"controller_i.530:IF" -> "controller_i.532:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[7])",
		lineno=530];
	"566:CS" -> "570:CA"	 [cond="['alu_op_a_mux_sel']",
		label=alu_op_a_mux_sel,
		lineno=566];
	"566:CS" -> "567:CA"	 [cond="['alu_op_a_mux_sel']",
		label=alu_op_a_mux_sel,
		lineno=566];
	"566:CS" -> "568:CA"	 [cond="['alu_op_a_mux_sel']",
		label=alu_op_a_mux_sel,
		lineno=566];
	"566:CS" -> "571:CA"	 [cond="['alu_op_a_mux_sel']",
		label=alu_op_a_mux_sel,
		lineno=566];
	"569:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e16450>",
		fillcolor=lightcyan,
		label="569:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"566:CS" -> "569:CA"	 [cond="['alu_op_a_mux_sel']",
		label=alu_op_a_mux_sel,
		lineno=566];
	"decoder_i.761:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c524d0>",
		fillcolor=turquoise,
		label="decoder_i.761:BL
regfile_we = 1'b0;
data_req_o = 1'b0;
data_we_o = 1'b0;
mult_en_o = 1'b0;
div_en_o = 1'b0;
jump_in_dec_o = 1'b0;
\
jump_set_o = 1'b0;
branch_in_dec_o = 1'b0;
csr_access_o = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4db50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4dcd0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4de10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4df50>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c520d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c52250>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c52390>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c52510>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c52690>]",
		style=filled,
		typ=Block];
	"decoder_i.761:IF" -> "decoder_i.761:BL"	 [cond="['illegal_insn']",
		label=illegal_insn,
		lineno=761];
	"controller_i.586:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.447:BS" -> "decoder_i.Leaf_443:AL"	 [cond="[]",
		lineno=None];
	"controller_i.537:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"592:CA" -> "592:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.749:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c4d3d0>",
		fillcolor=linen,
		label="decoder_i.749:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.749:CS" -> "decoder_i.752:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=749];
	"decoder_i.749:CS" -> "decoder_i.753:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=749];
	"decoder_i.749:CS" -> "decoder_i.751:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=749];
	"decoder_i.749:CS" -> "decoder_i.750:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=749];
	"decoder_i.751:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"659:AS" -> "controller_i.508:AS";
	"controller_i.698:BL" -> "controller_i.704:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.578:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c7c550>",
		fillcolor=springgreen,
		label="decoder_i.578:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.576:BL" -> "decoder_i.578:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.640:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a150>",
		fillcolor=cadetblue,
		label="decoder_i.640:BS
alu_operator_o = ALU_AND;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c9a150>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.640:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"778:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3657250>",
		fillcolor=turquoise,
		label="778:BL
id_wb_fsm_ns = (branch_decision_i)? WAIT_MULTICYCLE : IDLE;
stall_branch = branch_decision_i;
instr_multicycle_done_n = ~\
branch_decision_i;
branch_set_n = branch_decision_i;
perf_branch_o = 1'b1;
instr_ret_o = ~branch_decision_i;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634b90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634d10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3634f10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3657110>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3657290>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3657450>]",
		style=filled,
		typ=Block];
	"778:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.658:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.750:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eacc10>",
		fillcolor=cadetblue,
		label="controller_i.750:BS
ctrl_fsm_ns = IRQ_TAKEN;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3eacc10>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.749:IF" -> "controller_i.750:BS"	 [cond="['csr_pipe_flush', 'handle_irq']",
		label="(csr_pipe_flush && handle_irq)",
		lineno=749];
	"registers_i.58:AS" -> "registers_i.60:AS";
	"registers_i.58:AS" -> "registers_i.59:AS";
	"decoder_i.579:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c650>",
		fillcolor=cadetblue,
		label="decoder_i.579:BS
illegal_insn = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c650>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.578:IF" -> "decoder_i.579:BS"	 [cond="['instr']",
		label="instr[14]",
		lineno=578];
	"decoder_i.636:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c95510>",
		fillcolor=lightcyan,
		label="decoder_i.636:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.636:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95610>",
		fillcolor=cadetblue,
		label="decoder_i.636:BS
alu_operator_o = ALU_SLT;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c95610>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.636:CA" -> "decoder_i.636:BS"	 [cond="[]",
		lineno=None];
	"controller_i.708:IF" -> "controller_i.708:BL"	 [cond="['illegal_insn_q']",
		label=illegal_insn_q,
		lineno=708];
	"controller_i.712:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3e70890>",
		fillcolor=springgreen,
		label="controller_i.712:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.708:IF" -> "controller_i.712:IF"	 [cond="['illegal_insn_q']",
		label="!(illegal_insn_q)",
		lineno=708];
	"735:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf363cf50>",
		def_var="['multdiv_operator_ex_o']",
		fillcolor=deepskyblue,
		label="735:AS
multdiv_operator_ex_o = multdiv_operator;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['multdiv_operator']"];
	"721:AS" -> "587:AS";
	"721:AS" -> "724:AS";
	"721:AS" -> "722:AS";
	"723:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e25b10>",
		def_var="['mult_en_id']",
		fillcolor=deepskyblue,
		label="723:AS
mult_en_id = (instr_executing)? mult_en_dec : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_executing', 'mult_en_dec']"];
	"721:AS" -> "723:AS";
	"decoder_i.453:AL" -> "decoder_i.453:BL"	 [cond="[]",
		lineno=None];
	"controller_i.535:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.633:CS" -> "decoder_i.638:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.679:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.700:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.651:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.665:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.686:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.641:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.658:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.643:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.644:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.635:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.672:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.642:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.633:CS" -> "decoder_i.636:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.639:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c95d50>",
		fillcolor=lightcyan,
		label="decoder_i.639:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.633:CS" -> "decoder_i.639:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.634:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c91f50>",
		fillcolor=lightcyan,
		label="decoder_i.634:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.633:CS" -> "decoder_i.634:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.693:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c343d0>",
		fillcolor=lightcyan,
		label="decoder_i.693:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.633:CS" -> "decoder_i.693:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.637:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c957d0>",
		fillcolor=lightcyan,
		label="decoder_i.637:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.633:CS" -> "decoder_i.637:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"decoder_i.640:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c9a050>",
		fillcolor=lightcyan,
		label="decoder_i.640:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.633:CS" -> "decoder_i.640:CA"	 [cond="['instr', 'instr']",
		label="{ instr[30:25], instr[14:12] }",
		lineno=633];
	"controller_i.602:CA" -> "controller_i.602:BL"	 [cond="[]",
		lineno=None];
	"controller_i.518:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3fac890>",
		fillcolor=springgreen,
		label="controller_i.518:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.518:IF" -> "controller_i.520:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[13])",
		lineno=518];
	"controller_i.519:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3fac8d0>",
		fillcolor=cadetblue,
		label="controller_i.519:BS
mfip_id = 4'd13;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3fac8d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.518:IF" -> "controller_i.519:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[13]",
		lineno=518];
	"decoder_i.639:CA" -> "decoder_i.639:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.617:IF" -> "decoder_i.618:BS"	 [cond="['instr']",
		label="(instr[31:25] == 7'b0)",
		lineno=617];
	"decoder_i.619:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c8bf10>",
		fillcolor=springgreen,
		label="decoder_i.619:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.617:IF" -> "decoder_i.619:IF"	 [cond="['instr']",
		label="!((instr[31:25] == 7'b0))",
		lineno=617];
	"decoder_i.559:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.503:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf39a4a10>",
		fillcolor=turquoise,
		label="decoder_i.503:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_b_mux_sel_o = IMM_B_I;
alu_operator_o = ALU_\
ADD;
regfile_we = 1'b0;
jump_set_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4450>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4610>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4790>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4910>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4a50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf39a4b90>]",
		style=filled,
		typ=Block];
	"decoder_i.503:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"768:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.651:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.672:IF" -> "controller_i.675:BS"	 [cond="['debug_single_step_i']",
		label="!(debug_single_step_i)",
		lineno=672];
	"controller_i.673:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865410>",
		fillcolor=cadetblue,
		label="controller_i.673:BS
debug_cause_o = DBG_CAUSE_STEP;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3865410>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.672:IF" -> "controller_i.673:BS"	 [cond="['debug_single_step_i']",
		label=debug_single_step_i,
		lineno=672];
	"controller_i.630:IF" -> "controller_i.631:IF"	 [cond="['stall', 'special_req']",
		label="(!stall && !special_req)",
		lineno=630];
	"decoder_i.735:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c43c50>",
		fillcolor=springgreen,
		label="decoder_i.735:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.735:IF" -> "decoder_i.736:BS"	 [cond="['instr', 'instr']",
		label="((instr[19:15] != 5'b0) || (instr[11:07] != 5'b0))",
		lineno=735];
	"decoder_i.424:AS" -> "574:AL";
	"controller_i.513:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fabe50>",
		def_var="['ebreak_into_debug']",
		fillcolor=deepskyblue,
		label="controller_i.513:AS
ebreak_into_debug = (priv_mode_i == PRIV_LVL_M)? debug_ebreakm_i : 
(priv_mode_i == PRIV_LVL_U)? debug_ebreaku_\
i : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['priv_mode_i', 'PRIV_LVL_M', 'debug_ebreakm_i', 'priv_mode_i', 'PRIV_LVL_U', 'debug_ebreaku_i']"];
	"controller_i.513:AS" -> "controller_i.550:AL";
	"767:CS" -> "773:CA"	 [cond="[]",
		label="1'b1",
		lineno=767];
	"767:CS" -> "786:CA"	 [cond="[]",
		label="1'b1",
		lineno=767];
	"767:CS" -> "768:CA"	 [cond="[]",
		label="1'b1",
		lineno=767];
	"778:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3634850>",
		fillcolor=lightcyan,
		label="778:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"767:CS" -> "778:CA"	 [cond="[]",
		label="1'b1",
		lineno=767];
	"791:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3657990>",
		fillcolor=lightcyan,
		label="791:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"767:CS" -> "791:CA"	 [cond="[]",
		label="1'b1",
		lineno=767];
	"decoder_i.575:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c110>",
		fillcolor=cadetblue,
		label="decoder_i.575:BS
data_type_o = 2'b01;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c7c110>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.575:CA" -> "decoder_i.575:BS"	 [cond="[]",
		lineno=None];
	"742:IF" -> "747:BL"	 [cond="['rst_ni']",
		label="!((!rst_ni))",
		lineno=742];
	"742:IF" -> "742:BL"	 [cond="['rst_ni']",
		label="(!rst_ni)",
		lineno=742];
	"decoder_i.643:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.619:IF" -> "decoder_i.620:BS"	 [cond="['instr']",
		label="(instr[31:25] == 7'b010_0000)",
		lineno=619];
	"decoder_i.619:IF" -> "decoder_i.622:BS"	 [cond="['instr']",
		label="!((instr[31:25] == 7'b010_0000))",
		lineno=619];
	"decoder_i.718:IF" -> "decoder_i.719:BS"	 [cond="['instr_new_i']",
		label=instr_new_i,
		lineno=718];
	"controller_i.621:IF" -> "controller_i.621:BL"	 [cond="['branch_set_i', 'jump_set_i']",
		label="(branch_set_i || jump_set_i)",
		lineno=621];
	"controller_i.Leaf_764:AL" -> "controller_i.509:AS";
	"controller_i.Leaf_764:AL" -> "controller_i.760:AS";
	"controller_i.Leaf_764:AL" -> "controller_i.550:AL";
	"controller_i.Leaf_764:AL" -> "controller_i.506:AS";
	"controller_i.514:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fabed0>",
		def_var="['handle_irq']",
		fillcolor=deepskyblue,
		label="controller_i.514:AS
handle_irq = ~debug_mode_q & (irq_nm_i & ~nmi_mode_q | irq_pending_i & csr_mstatus_mie_i);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['debug_mode_q', 'irq_nm_i', 'nmi_mode_q', 'irq_pending_i', 'csr_mstatus_mie_i']"];
	"controller_i.Leaf_764:AL" -> "controller_i.514:AS";
	"controller_i.Leaf_764:AL" -> "controller_i.508:AS";
	"controller_i.512:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3fab910>",
		def_var="['enter_debug_mode']",
		fillcolor=deepskyblue,
		label="controller_i.512:AS
enter_debug_mode = (debug_req_i | debug_single_step_i & instr_valid_i) & ~debug_mode_q;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['debug_req_i', 'debug_single_step_i', 'instr_valid_i', 'debug_mode_q']"];
	"controller_i.Leaf_764:AL" -> "controller_i.512:AS";
	"decoder_i.761:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.579:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.527:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.516:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3fac590>",
		fillcolor=springgreen,
		label="controller_i.516:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"controller_i.516:IF" -> "controller_i.518:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[14])",
		lineno=516];
	"controller_i.517:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3fac5d0>",
		fillcolor=cadetblue,
		label="controller_i.517:BS
mfip_id = 4'd14;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3fac5d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.516:IF" -> "controller_i.517:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[14]",
		lineno=516];
	"719:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3e0cdd0>",
		def_var="['multdiv_en_dec']",
		fillcolor=deepskyblue,
		label="719:AS
multdiv_en_dec = mult_en_dec | div_en_dec;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['mult_en_dec', 'div_en_dec']"];
	"719:AS" -> "587:AS";
	"719:AS" -> "720:AS";
	"719:AS" -> "753:AL";
	"controller_i.655:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c150>",
		fillcolor=cadetblue,
		label="controller_i.655:BS
exc_cause_o = EXC_CAUSE_IRQ_EXTERNAL_M;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf385c150>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.655:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"723:AS" -> "733:AS";
	"decoder_i.634:CA" -> "decoder_i.634:BS"	 [cond="[]",
		lineno=None];
	"569:CA" -> "569:BS"	 [cond="[]",
		lineno=None];
	"Leaf_574:AL" -> "586:AS";
	"decoder_i.672:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.605:CA" -> "decoder_i.605:BS"	 [cond="[]",
		lineno=None];
	"controller_i.750:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"583:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"controller_i.523:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.730:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c43210>",
		fillcolor=lightcyan,
		label="decoder_i.730:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.730:CA" -> "decoder_i.730:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.752:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.738:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c486d0>",
		fillcolor=turquoise,
		label="decoder_i.738:BL
csr_access_o = 1'b1;
regfile_wdata_sel_o = RF_WD_CSR;
regfile_we = 1'b1;
alu_op_b_mux_sel_o = OP_B_IMM;
imm_a_mux_\
sel_o = IMM_A_Z;
imm_b_mux_sel_o = IMM_B_I;
illegal_insn = csr_illegal;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c43f50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48150>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48290>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48410>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48590>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c48710>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c4d5d0>]",
		style=filled,
		typ=Block];
	"decoder_i.724:IF" -> "decoder_i.738:BL"	 [cond="['instr']",
		label="!((instr[14:12] == 3'b000))",
		lineno=724];
	"decoder_i.724:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3c3ead0>",
		fillcolor=turquoise,
		label="decoder_i.724:BL
alu_op_a_mux_sel_o = OP_A_REG_A;
alu_op_b_mux_sel_o = OP_B_IMM;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3e990>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c3eb10>]",
		style=filled,
		typ=Block];
	"decoder_i.724:IF" -> "decoder_i.724:BL"	 [cond="['instr']",
		label="(instr[14:12] == 3'b000)",
		lineno=724];
	"decoder_i.679:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.556:CS" -> "decoder_i.560:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=556];
	"decoder_i.556:CS" -> "decoder_i.558:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=556];
	"decoder_i.556:CS" -> "decoder_i.557:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=556];
	"decoder_i.556:CS" -> "decoder_i.559:CA"	 [cond="['instr']",
		label="instr[13:12]",
		lineno=556];
	"decoder_i.529:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.734:IF" -> "controller_i.734:BL"	 [cond="['mret_insn']",
		label=mret_insn,
		lineno=734];
	"controller_i.734:IF" -> "controller_i.741:IF"	 [cond="['mret_insn']",
		label="!(mret_insn)",
		lineno=734];
	"580:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3dfa510>",
		fillcolor=lightcyan,
		label="580:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"580:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa610>",
		fillcolor=cadetblue,
		label="580:BS
imm_b = imm_j_type;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3dfa610>]",
		style=filled,
		typ=BlockingSubstitution];
	"580:CA" -> "580:BS"	 [cond="[]",
		lineno=None];
	"568:BS" -> "Leaf_565:AL"	 [cond="[]",
		lineno=None];
	"588:BL" -> "589:CS"	 [cond="[]",
		lineno=None];
	"764:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3661ad0>",
		fillcolor=linen,
		label="764:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"764:CS" -> "765:CA"	 [cond="['id_wb_fsm_cs']",
		label=id_wb_fsm_cs,
		lineno=764];
	"764:CS" -> "796:CA"	 [cond="['id_wb_fsm_cs']",
		label=id_wb_fsm_cs,
		lineno=764];
	"764:CS" -> "809:CA"	 [cond="['id_wb_fsm_cs']",
		label=id_wb_fsm_cs,
		lineno=764];
	"controller_i.511:AS" -> "controller_i.550:AL";
	"controller_i.515:BL" -> "controller_i.516:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.686:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"580:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"565:AL" -> "565:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.729:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.503:IF" -> "decoder_i.511:BL"	 [cond="['instr_new_i']",
		label="!(instr_new_i)",
		lineno=503];
	"decoder_i.503:IF" -> "decoder_i.503:BL"	 [cond="['instr_new_i']",
		label=instr_new_i,
		lineno=503];
	"decoder_i.738:BL" -> "decoder_i.745:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.738:BL" -> "decoder_i.749:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.724:BL" -> "decoder_i.735:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.727:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7feaf3c43790>",
		fillcolor=linen,
		label="decoder_i.727:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"decoder_i.724:BL" -> "decoder_i.727:CS"	 [cond="[]",
		lineno=None];
	"controller_i.514:AS" -> "controller_i.550:AL";
	"controller_i.600:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.613:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7feaf3c8b550>",
		fillcolor=springgreen,
		label="decoder_i.613:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"decoder_i.611:BL" -> "decoder_i.613:IF"	 [cond="[]",
		lineno=None];
	"controller_i.603:IF" -> "controller_i.604:BS"	 [cond="['id_in_ready_o']",
		label=id_in_ready_o,
		lineno=603];
	"decoder_i.693:CA" -> "decoder_i.693:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.631:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"578:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3dfa110>",
		fillcolor=lightcyan,
		label="578:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"578:CA" -> "578:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.Leaf_438:AL" -> "decoder_i.443:AL";
	"decoder_i.705:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.524:IF" -> "controller_i.526:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[10])",
		lineno=524];
	"controller_i.524:IF" -> "controller_i.525:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[10]",
		lineno=524];
	"797:IF" -> "803:BL"	 [cond="['data_req_dec', 'lsu_valid_i', 'data_req_dec', 'ex_valid_i']",
		label="!((data_req_dec & lsu_valid_i | ~data_req_dec & ex_valid_i))",
		lineno=797];
	"797:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf3667750>",
		fillcolor=turquoise,
		label="797:BL
id_wb_fsm_ns = IDLE;
instr_multicycle_done_n = 1'b1;
regfile_we_wb = regfile_we_dec & ~lsu_load_err_i;
instr_ret_o = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667250>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667410>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf36676d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3667810>]",
		style=filled,
		typ=Block];
	"797:IF" -> "797:BL"	 [cond="['data_req_dec', 'lsu_valid_i', 'data_req_dec', 'ex_valid_i']",
		label="(data_req_dec & lsu_valid_i | ~data_req_dec & ex_valid_i)",
		lineno=797];
	"decoder_i.450:IF" -> "decoder_i.451:BS"	 [cond="['sv2v_cast_290A1', 'instr', 'CSR_DCSR', 'sv2v_cast_290A1', 'instr', 'CSR_DPC', 'sv2v_cast_290A1', 'instr', 'CSR_DSCRATCH0', 'sv2v_\
cast_290A1', 'instr', 'CSR_DSCRATCH1']",
		label="((sv2v_cast_290A1(instr[31:20]) == CSR_DCSR) || (sv2v_cast_290A1(instr[31:20]) == CSR_DPC) || (sv2v_cast_290A1(instr[31:20]) == \
CSR_DSCRATCH0) || (sv2v_cast_290A1(instr[31:20]) == CSR_DSCRATCH1))",
		lineno=450];
	"753:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7feaf36616d0>",
		fillcolor=turquoise,
		label="753:BL
id_wb_fsm_ns = id_wb_fsm_cs;
instr_multicycle_done_n = instr_multicycle_done_q;
regfile_we_wb = 1'b0;
stall_lsu = 1'b0;
stall_\
multdiv = 1'b0;
stall_jump = 1'b0;
stall_branch = 1'b0;
branch_set_n = 1'b0;
perf_branch_o = 1'b0;
instr_ret_o = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf36498d0>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3649ad0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3649c50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3649d90>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3649f10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661090>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661210>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661390>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661510>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3661650>]",
		style=filled,
		typ=Block];
	"753:BL" -> "764:CS"	 [cond="[]",
		lineno=None];
	"controller_i.616:BL" -> "controller_i.627:IF"	 [cond="[]",
		lineno=None];
	"controller_i.616:BL" -> "controller_i.617:IF"	 [cond="[]",
		lineno=None];
	"controller_i.507:AS" -> "controller_i.508:AS";
	"controller_i.505:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8cf90>",
		def_var="['instr_fetch_err']",
		fillcolor=deepskyblue,
		label="controller_i.505:AS
instr_fetch_err = instr_fetch_err_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['instr_fetch_err_i', 'instr_valid_i']"];
	"controller_i.505:AS" -> "controller_i.509:AS";
	"controller_i.505:AS" -> "controller_i.550:AL";
	"controller_i.654:IF" -> "controller_i.656:IF"	 [cond="['csr_meip_i']",
		label="!(csr_meip_i)",
		lineno=654];
	"controller_i.654:IF" -> "controller_i.655:BS"	 [cond="['csr_meip_i']",
		label=csr_meip_i,
		lineno=654];
	"decoder_i.721:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.725:IF" -> "controller_i.725:BL"	 [cond="['store_err_q']",
		label=store_err_q,
		lineno=725];
	"controller_i.725:IF" -> "controller_i.729:BL"	 [cond="['store_err_q']",
		label="!(store_err_q)",
		lineno=725];
	"571:BS" -> "Leaf_565:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.637:CA" -> "decoder_i.637:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.443:BL" -> "decoder_i.445:IF"	 [cond="[]",
		lineno=None];
	"controller_i.642:IF" -> "controller_i.642:BL"	 [cond="['handle_irq']",
		label=handle_irq,
		lineno=642];
	"controller_i.673:BS" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.640:CA" -> "decoder_i.640:BS"	 [cond="[]",
		lineno=None];
	"controller_i.503:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8ca90>",
		def_var="['ebrk_insn']",
		fillcolor=deepskyblue,
		label="controller_i.503:AS
ebrk_insn = ebrk_insn_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['ebrk_insn_i', 'instr_valid_i']"];
	"controller_i.503:AS" -> "controller_i.509:AS";
	"controller_i.503:AS" -> "controller_i.550:AL";
	"decoder_i.435:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf39aca90>",
		def_var="['illegal_reg_rv32e']",
		fillcolor=deepskyblue,
		label="decoder_i.435:AS
illegal_reg_rv32e = 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"decoder_i.435:AS" -> "decoder_i.774:AS";
	"decoder_i.435:AS" -> "decoder_i.773:AS";
	"decoder_i.608:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86b50>",
		fillcolor=cadetblue,
		label="decoder_i.608:BS
alu_operator_o = ALU_XOR;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3c86b50>]",
		style=filled,
		typ=BlockingSubstitution];
	"decoder_i.608:CA" -> "decoder_i.608:BS"	 [cond="[]",
		lineno=None];
	"778:CA" -> "778:BL"	 [cond="[]",
		lineno=None];
	"registers_i.Leaf_41:AL"	 [def_var="[]",
		label="registers_i.Leaf_41:AL"];
	"registers_i.41:BL" -> "registers_i.Leaf_41:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.636:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.508:AS" -> "controller_i.764:AL";
	"controller_i.508:AS" -> "controller_i.509:AS";
	"controller_i.540:IF" -> "controller_i.542:IF"	 [cond="['csr_mfip_i']",
		label="!(csr_mfip_i[3])",
		lineno=540];
	"controller_i.541:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838a50>",
		fillcolor=cadetblue,
		label="controller_i.541:BS
mfip_id = 4'd3;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7feaf3838a50>]",
		style=filled,
		typ=BlockingSubstitution];
	"controller_i.540:IF" -> "controller_i.541:BS"	 [cond="['csr_mfip_i']",
		label="csr_mfip_i[3]",
		lineno=540];
	"590:BS" -> "Leaf_588:AL"	 [cond="[]",
		lineno=None];
	"797:BL" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"controller_i.545:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.427:AS" -> "decoder_i.432:AS";
	"decoder_i.427:AS" -> "608:AS";
	"decoder_i.610:CA" -> "decoder_i.610:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.613:IF" -> "decoder_i.614:BS"	 [cond="['instr']",
		label="(instr[31:25] != 7'b0)",
		lineno=613];
	"decoder_i.532:BL" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.728:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3c3edd0>",
		fillcolor=lightcyan,
		label="decoder_i.728:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.728:CA" -> "decoder_i.728:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.574:CA" -> "decoder_i.574:BS"	 [cond="[]",
		lineno=None];
	"decoder_i.759:IF" -> "decoder_i.760:BS"	 [cond="['illegal_c_insn_i']",
		label=illegal_c_insn_i,
		lineno=759];
	"registers_i.50:NS" -> "registers_i.Leaf_48:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.592:CA" -> "decoder_i.592:BL"	 [cond="[]",
		lineno=None];
	"controller_i.715:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"575:CS" -> "583:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"575:CS" -> "579:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"575:CS" -> "576:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"575:CS" -> "581:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"575:CS" -> "582:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"575:CS" -> "580:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"575:CS" -> "578:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"577:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf3e16f10>",
		fillcolor=lightcyan,
		label="577:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"575:CS" -> "577:CA"	 [cond="['imm_b_mux_sel']",
		label=imm_b_mux_sel,
		lineno=575];
	"controller_i.517:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.727:CS" -> "decoder_i.731:CA"	 [cond="['instr']",
		label="instr[31:20]",
		lineno=727];
	"decoder_i.727:CS" -> "decoder_i.733:CA"	 [cond="['instr']",
		label="instr[31:20]",
		lineno=727];
	"decoder_i.727:CS" -> "decoder_i.729:CA"	 [cond="['instr']",
		label="instr[31:20]",
		lineno=727];
	"decoder_i.727:CS" -> "decoder_i.732:CA"	 [cond="['instr']",
		label="instr[31:20]",
		lineno=727];
	"decoder_i.727:CS" -> "decoder_i.730:CA"	 [cond="['instr']",
		label="instr[31:20]",
		lineno=727];
	"decoder_i.727:CS" -> "decoder_i.728:CA"	 [cond="['instr']",
		label="instr[31:20]",
		lineno=727];
	"Leaf_753:AL" -> "587:AS";
	"Leaf_753:AL" -> "741:AL";
	"Leaf_753:AL" -> "812:AS";
	"Leaf_753:AL" -> "controller_i.761:AS";
	"562:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3df4590>",
		def_var="['alu_op_b_mux_sel']",
		fillcolor=deepskyblue,
		label="562:AS
alu_op_b_mux_sel = (lsu_addr_incr_req_i)? OP_B_IMM : alu_op_b_mux_sel_dec;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['lsu_addr_incr_req_i', 'OP_B_IMM', 'alu_op_b_mux_sel_dec']"];
	"562:AS" -> "586:AS";
	"controller_i.573:BL" -> "controller_i.577:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.558:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"809:BS" -> "Leaf_753:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.608:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"753:AL" -> "753:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.575:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"controller_i.550:BL" -> "controller_i.572:CS"	 [cond="[]",
		lineno=None];
	"decoder_i.523:CS" -> "decoder_i.529:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.523:CS" -> "decoder_i.528:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.523:CS" -> "decoder_i.524:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.523:CS" -> "decoder_i.526:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.523:CS" -> "decoder_i.530:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.523:CS" -> "decoder_i.527:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.525:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7feaf39a7e10>",
		fillcolor=lightcyan,
		label="decoder_i.525:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"decoder_i.523:CS" -> "decoder_i.525:CA"	 [cond="['instr']",
		label="instr[14:12]",
		lineno=523];
	"decoder_i.Leaf_453:AL" -> "587:AS";
	"decoder_i.Leaf_453:AL" -> "728:AS";
	"decoder_i.Leaf_453:AL" -> "decoder_i.774:AS";
	"decoder_i.Leaf_453:AL" -> "controller_i.500:AS";
	"decoder_i.Leaf_453:AL" -> "decoder_i.432:AS";
	"decoder_i.Leaf_453:AL" -> "decoder_i.443:AL";
	"decoder_i.Leaf_453:AL" -> "561:AS";
	"decoder_i.Leaf_453:AL" -> "564:AS";
	"decoder_i.Leaf_453:AL" -> "controller_i.502:AS";
	"decoder_i.Leaf_453:AL" -> "726:AS";
	"decoder_i.Leaf_453:AL" -> "controller_i.499:AS";
	"decoder_i.Leaf_453:AL" -> "727:AS";
	"decoder_i.Leaf_453:AL" -> "724:AS";
	"decoder_i.Leaf_453:AL" -> "decoder_i.438:AL";
	"decoder_i.Leaf_453:AL" -> "563:AS";
	"decoder_i.Leaf_453:AL" -> "controller_i.550:AL";
	"decoder_i.Leaf_453:AL" -> "decoder_i.773:AS";
	"decoder_i.Leaf_453:AL" -> "730:AS";
	"decoder_i.Leaf_453:AL" -> "736:AS";
	"decoder_i.Leaf_453:AL" -> "722:AS";
	"decoder_i.Leaf_453:AL" -> "720:AS";
	"decoder_i.Leaf_453:AL" -> "588:AL";
	"decoder_i.Leaf_453:AL" -> "735:AS";
	"decoder_i.Leaf_453:AL" -> "decoder_i.453:AL";
	"decoder_i.Leaf_453:AL" -> "719:AS";
	"decoder_i.Leaf_453:AL" -> "723:AS";
	"decoder_i.Leaf_453:AL" -> "controller_i.503:AS";
	"decoder_i.Leaf_453:AL" -> "562:AS";
	"decoder_i.Leaf_453:AL" -> "753:AL";
	"controller_i.501:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7feaf3f8c690>",
		def_var="['dret_insn']",
		fillcolor=deepskyblue,
		label="controller_i.501:AS
dret_insn = dret_insn_i & instr_valid_i;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['dret_insn_i', 'instr_valid_i']"];
	"decoder_i.Leaf_453:AL" -> "controller_i.501:AS";
	"decoder_i.599:CA" -> "decoder_i.599:BL"	 [cond="[]",
		lineno=None];
	"controller_i.741:BL" -> "controller_i.Leaf_550:AL"	 [cond="[]",
		lineno=None];
	"controller_i.543:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"decoder_i.623:CA" -> "decoder_i.623:BS"	 [cond="[]",
		lineno=None];
	"582:BS" -> "Leaf_574:AL"	 [cond="[]",
		lineno=None];
	"570:BS" -> "Leaf_565:AL"	 [cond="[]",
		lineno=None];
	"controller_i.501:AS" -> "controller_i.550:AL";
	"controller_i.501:AS" -> "controller_i.506:AS";
	"controller_i.501:AS" -> "controller_i.511:AS";
	"decoder_i.525:CA" -> "decoder_i.525:BS"	 [cond="[]",
		lineno=None];
	"591:CA" -> "591:BS"	 [cond="[]",
		lineno=None];
	"controller_i.680:BL" -> "controller_i.685:IF"	 [cond="[]",
		lineno=None];
	"decoder_i.757:BS" -> "decoder_i.Leaf_453:AL"	 [cond="[]",
		lineno=None];
	"577:CA" -> "577:BS"	 [cond="[]",
		lineno=None];
	"controller_i.541:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.610:IF" -> "controller_i.610:BL"	 [cond="['enter_debug_mode']",
		label=enter_debug_mode,
		lineno=610];
	"controller_i.512:AS" -> "controller_i.550:AL";
	"Leaf_588:AL" -> "613:AS";
	"controller_i.519:BS" -> "controller_i.Leaf_515:AL"	 [cond="[]",
		lineno=None];
	"controller_i.712:IF" -> "controller_i.714:IF"	 [cond="['ecall_insn']",
		label="!(ecall_insn)",
		lineno=712];
	"controller_i.712:IF" -> "controller_i.713:BS"	 [cond="['ecall_insn']",
		label=ecall_insn,
		lineno=712];
	"791:CA" -> "791:BL"	 [cond="[]",
		lineno=None];
	"decoder_i.425:AS" -> "574:AL";
}
